
Bootloader_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08001800  08001800  00001800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017d8  0800190c  0800190c  0000190c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030e4  080030e4  000030e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f4  080030f4  00010010  2**0
                  CONTENTS
  4 .ARM          00000000  080030f4  080030f4  00010010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f4  080030f4  00010010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f4  080030f4  000030f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f8  080030f8  000030f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080030fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000010  0800310c  00010010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  0800310c  0001004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000354a  00000000  00000000  00010039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001031  00000000  00000000  00013583  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e8  00000000  00000000  000145b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000348  00000000  00000000  000149a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010ecd  00000000  00000000  00014ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041c2  00000000  00000000  00025bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007cb8b  00000000  00000000  00029d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a6902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ca8  00000000  00000000  000a6980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800190c <__do_global_dtors_aux>:
 800190c:	b510      	push	{r4, lr}
 800190e:	4c05      	ldr	r4, [pc, #20]	; (8001924 <__do_global_dtors_aux+0x18>)
 8001910:	7823      	ldrb	r3, [r4, #0]
 8001912:	b933      	cbnz	r3, 8001922 <__do_global_dtors_aux+0x16>
 8001914:	4b04      	ldr	r3, [pc, #16]	; (8001928 <__do_global_dtors_aux+0x1c>)
 8001916:	b113      	cbz	r3, 800191e <__do_global_dtors_aux+0x12>
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <__do_global_dtors_aux+0x20>)
 800191a:	f3af 8000 	nop.w
 800191e:	2301      	movs	r3, #1
 8001920:	7023      	strb	r3, [r4, #0]
 8001922:	bd10      	pop	{r4, pc}
 8001924:	20000010 	.word	0x20000010
 8001928:	00000000 	.word	0x00000000
 800192c:	080030cc 	.word	0x080030cc

08001930 <frame_dummy>:
 8001930:	b508      	push	{r3, lr}
 8001932:	4b03      	ldr	r3, [pc, #12]	; (8001940 <frame_dummy+0x10>)
 8001934:	b11b      	cbz	r3, 800193e <frame_dummy+0xe>
 8001936:	4903      	ldr	r1, [pc, #12]	; (8001944 <frame_dummy+0x14>)
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <frame_dummy+0x18>)
 800193a:	f3af 8000 	nop.w
 800193e:	bd08      	pop	{r3, pc}
 8001940:	00000000 	.word	0x00000000
 8001944:	20000014 	.word	0x20000014
 8001948:	080030cc 	.word	0x080030cc

0800194c <USB_LP_CAN1_RX0_IRQHandler>:

static void (*callBack)(void) = NULL;


void  USB_LP_CAN1_RX0_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	if(callBack != NULL)
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <USB_LP_CAN1_RX0_IRQHandler+0x12>
		callBack();
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4798      	blx	r3
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	2000002c 	.word	0x2000002c

08001968 <CAN_Init>:



void CAN_Init(void (*ptr)(void))
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	callBack = ptr;
 8001970:	4a5f      	ldr	r2, [pc, #380]	; (8001af0 <CAN_Init+0x188>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]

	RCC_EnablePeripheralClock(CAN_PERIPHERAL);
 8001976:	2039      	movs	r0, #57	; 0x39
 8001978:	f001 f95c 	bl	8002c34 <RCC_EnablePeripheralClock>
//	RCC_EnablePeripheralClock(GPIOA_PERIPHERAL);
	RCC_EnablePeripheralClock(GPIOB_PERIPHERAL);
 800197c:	2043      	movs	r0, #67	; 0x43
 800197e:	f001 f959 	bl	8002c34 <RCC_EnablePeripheralClock>
	RCC_EnablePeripheralClock(AFIO_PERIPHERAL);
 8001982:	2040      	movs	r0, #64	; 0x40
 8001984:	f001 f956 	bl	8002c34 <RCC_EnablePeripheralClock>

	NVIC_EnableInterrupt(USB_LP_CAN1_RX0_IRQn);
 8001988:	2014      	movs	r0, #20
 800198a:	f001 f893 	bl	8002ab4 <NVIC_EnableInterrupt>


	CLR_BIT(CAN1->MCR, 1);		// exit sleep mode
 800198e:	4b59      	ldr	r3, [pc, #356]	; (8001af4 <CAN_Init+0x18c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a58      	ldr	r2, [pc, #352]	; (8001af4 <CAN_Init+0x18c>)
 8001994:	f023 0302 	bic.w	r3, r3, #2
 8001998:	6013      	str	r3, [r2, #0]
	while(GET_BIT(CAN1->MSR, 0) == 1);		// wait until sleep ack be 0
 800199a:	bf00      	nop
 800199c:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <CAN_Init+0x18c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d0f9      	beq.n	800199c <CAN_Init+0x34>


	SET_BIT(CAN1->MCR, 0);		// enter intialization mode
 80019a8:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <CAN_Init+0x18c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <CAN_Init+0x18c>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6013      	str	r3, [r2, #0]
	while(GET_BIT(CAN1->MSR, 0) == 0);		// wait until intialization ack be 1
 80019b4:	bf00      	nop
 80019b6:	4b4f      	ldr	r3, [pc, #316]	; (8001af4 <CAN_Init+0x18c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f9      	beq.n	80019b6 <CAN_Init+0x4e>

	SET_BIT(CAN1->IER, 1);		// FIFI 0 Rx IRQ enable
 80019c2:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <CAN_Init+0x18c>)
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4a4b      	ldr	r2, [pc, #300]	; (8001af4 <CAN_Init+0x18c>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6153      	str	r3, [r2, #20]

//	SET_BIT(CAN1->BTR, 31);		// silent mode
	CLR_BIT(CAN1->BTR, 31);		// not silent mode
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <CAN_Init+0x18c>)
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	4a48      	ldr	r2, [pc, #288]	; (8001af4 <CAN_Init+0x18c>)
 80019d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019d8:	61d3      	str	r3, [r2, #28]
//	SET_BIT(CAN1->BTR, 30);		// loopback mode
	CLR_BIT(CAN1->BTR, 30);		// not loopback mode
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <CAN_Init+0x18c>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a45      	ldr	r2, [pc, #276]	; (8001af4 <CAN_Init+0x18c>)
 80019e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80019e4:	61d3      	str	r3, [r2, #28]

	// lower data rate to be 250 Kbps
	CAN1->BTR &= 0xF0000000;		// clear all register except high ones
 80019e6:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <CAN_Init+0x18c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <CAN_Init+0x18c>)
 80019ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80019f0:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 0);		// BRP bits (9:0) = 1 --> prescaller = 2
 80019f2:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <CAN_Init+0x18c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a3f      	ldr	r2, [pc, #252]	; (8001af4 <CAN_Init+0x18c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 1);		// BRP bits (9:0) = 3 --> prescaller = 4
 80019fe:	4b3d      	ldr	r3, [pc, #244]	; (8001af4 <CAN_Init+0x18c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <CAN_Init+0x18c>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 2);		// BRP bits (9:0) = 7 --> prescaller = 8
 8001a0a:	4b3a      	ldr	r3, [pc, #232]	; (8001af4 <CAN_Init+0x18c>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	4a39      	ldr	r2, [pc, #228]	; (8001af4 <CAN_Init+0x18c>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	61d3      	str	r3, [r2, #28]

	SET_BIT(CAN1->BTR, 17);		// TS1 bits (19:16) = 2  --> t_BS1 = 3  tq
 8001a16:	4b37      	ldr	r3, [pc, #220]	; (8001af4 <CAN_Init+0x18c>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a36      	ldr	r2, [pc, #216]	; (8001af4 <CAN_Init+0x18c>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 18);		// TS1 bits (19:16) = 6  --> t_BS1 = 7  tq
 8001a22:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <CAN_Init+0x18c>)
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <CAN_Init+0x18c>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 19);		// TS1 bits (19:16) = 14 --> t_BS1 = 15 tq
 8001a2e:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <CAN_Init+0x18c>)
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <CAN_Init+0x18c>)
 8001a34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a38:	61d3      	str	r3, [r2, #28]

	SET_BIT(CAN1->BTR, 20);		// TS2 bits (22:20) = 1 --> t_BS2 = 2 tq
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <CAN_Init+0x18c>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	; (8001af4 <CAN_Init+0x18c>)
 8001a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a44:	61d3      	str	r3, [r2, #28]

	SET_BIT(CAN1->BTR, 24);		// SJW bits (25:24) = 1 --> SJW = tq
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <CAN_Init+0x18c>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	4a2a      	ldr	r2, [pc, #168]	; (8001af4 <CAN_Init+0x18c>)
 8001a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a50:	61d3      	str	r3, [r2, #28]

//	CLR_BIT(CAN1->MCR, 16);	// no debug freeze
//	SET_BIT(CAN1->MCR, 4);	// no automatic retransmission


	CAN1->FMR &= ~(0x3FUL<<8);	// all filters for CAN1
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <CAN_Init+0x18c>)
 8001a54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a58:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <CAN_Init+0x18c>)
 8001a5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a5e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1->FMR |=  (14UL<<8);		// all filters for CAN1
 8001a62:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <CAN_Init+0x18c>)
 8001a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a68:	4a22      	ldr	r2, [pc, #136]	; (8001af4 <CAN_Init+0x18c>)
 8001a6a:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8001a6e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	SET_BIT(CAN1->MCR, 6);		// Bus-Off is left automatically by hardware
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <CAN_Init+0x18c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <CAN_Init+0x18c>)
 8001a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a7c:	6013      	str	r3, [r2, #0]

	SET_BIT(CAN1->MCR, 2);		// Tx mailbox priority by first requested
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <CAN_Init+0x18c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <CAN_Init+0x18c>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6013      	str	r3, [r2, #0]

	CLR_BIT(CAN1->MCR, 0);		// exit intialization mode
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <CAN_Init+0x18c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a19      	ldr	r2, [pc, #100]	; (8001af4 <CAN_Init+0x18c>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6013      	str	r3, [r2, #0]
	while(GET_BIT(CAN1->MSR, 0) == 1);		// wait until intialization mode ack
 8001a96:	bf00      	nop
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <CAN_Init+0x18c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d0f9      	beq.n	8001a98 <CAN_Init+0x130>


	// remap CAN pins, CAN_RX mapped to PB8, CAN_TX mapped to PB9
	SET_BIT(AFIO->MAPR, 14);
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <CAN_Init+0x190>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <CAN_Init+0x190>)
 8001aaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aae:	6053      	str	r3, [r2, #4]


	// CAN TX --> PA12 --> Alternate function push-pull
	GPIO_Pin_t  CAN_TxPin = {
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <CAN_Init+0x194>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	617b      	str	r3, [r7, #20]
		.port       =  GPIO_PORTB,
		.pinNumber  =  GPIO_PIN9
	};

	GPIO_PinConfg_t  CAN_TxPinConfig = {
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <CAN_Init+0x198>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	823b      	strh	r3, [r7, #16]
		.pinMode      =  ALTERNATE_FUNCTION_OUTPUT_PUSH_PULL,
		.outputSpeed  =  OUTPUT_SPEED_50MHz
	};

	GPIO_InitPins(&CAN_TxPin, &CAN_TxPinConfig);
 8001abc:	f107 0210 	add.w	r2, r7, #16
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4611      	mov	r1, r2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 ffb8 	bl	8002a3c <GPIO_InitPins>



	// CAN RX --> PA11 --> Input floating / Input pull-up
	GPIO_Pin_t  CAN_RxPin = {
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <CAN_Init+0x19c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
		.port       =  GPIO_PORTB,
		.pinNumber  =  GPIO_PIN8
	};

	GPIO_PinConfg_t  CAN_RxPinConfig = {
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <CAN_Init+0x1a0>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	813b      	strh	r3, [r7, #8]
		.pinMode      =  INPUT_PULL_UP,
		.outputSpeed  =  OUTPUT_SPEED_50MHz
	};

	GPIO_InitPins(&CAN_RxPin, &CAN_RxPinConfig);
 8001ad8:	f107 0208 	add.w	r2, r7, #8
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 ffaa 	bl	8002a3c <GPIO_InitPins>
}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000002c 	.word	0x2000002c
 8001af4:	40006400 	.word	0x40006400
 8001af8:	40010000 	.word	0x40010000
 8001afc:	080030e4 	.word	0x080030e4
 8001b00:	080030e8 	.word	0x080030e8
 8001b04:	080030ec 	.word	0x080030ec
 8001b08:	080030f0 	.word	0x080030f0

08001b0c <CAN_InitFilterBank>:



void CAN_InitFilterBank(CAN_RxFilterBankConfig_t*  filterConfig)
{
 8001b0c:	b490      	push	{r4, r7}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	if((filterConfig->filterBankNum) > 13)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b0d      	cmp	r3, #13
 8001b1a:	f200 8262 	bhi.w	8001fe2 <CAN_InitFilterBank+0x4d6>
		return;


	SET_BIT(CAN1->FMR, 0);	// enter filter initialization mode
 8001b1e:	4ba9      	ldr	r3, [pc, #676]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b24:	4aa7      	ldr	r2, [pc, #668]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CLR_BIT(CAN1->FA1R, filterConfig->filterBankNum);		// deactivate filter
 8001b2e:	4ba5      	ldr	r3, [pc, #660]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	408b      	lsls	r3, r1
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	49a0      	ldr	r1, [pc, #640]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c


	switch(filterConfig->desFifo)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	78db      	ldrb	r3, [r3, #3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d002      	beq.n	8001b56 <CAN_InitFilterBank+0x4a>
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d00e      	beq.n	8001b72 <CAN_InitFilterBank+0x66>
 8001b54:	e01a      	b.n	8001b8c <CAN_InitFilterBank+0x80>
	{
		case FIFO_0:
			CLR_BIT(CAN1->FFA1R, filterConfig->filterBankNum);
 8001b56:	4b9b      	ldr	r3, [pc, #620]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	2301      	movs	r3, #1
 8001b64:	408b      	lsls	r3, r1
 8001b66:	43db      	mvns	r3, r3
 8001b68:	4996      	ldr	r1, [pc, #600]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		break;
 8001b70:	e00c      	b.n	8001b8c <CAN_InitFilterBank+0x80>

		case FIFO_1:
			SET_BIT(CAN1->FFA1R, filterConfig->filterBankNum);
 8001b72:	4b94      	ldr	r3, [pc, #592]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b74:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	2301      	movs	r3, #1
 8001b80:	408b      	lsls	r3, r1
 8001b82:	4990      	ldr	r1, [pc, #576]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		break;
 8001b8a:	bf00      	nop
	}


	switch(filterConfig->mode)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	789b      	ldrb	r3, [r3, #2]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8104 	beq.w	8001d9e <CAN_InitFilterBank+0x292>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	f040 820e 	bne.w	8001fb8 <CAN_InitFilterBank+0x4ac>
	{
		case ID_MASK:
			CLR_BIT(CAN1->FM1R, filterConfig->filterBankNum);	// id mask mode
 8001b9c:	4b89      	ldr	r3, [pc, #548]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001b9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	2301      	movs	r3, #1
 8001baa:	408b      	lsls	r3, r1
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4985      	ldr	r1, [pc, #532]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204

			switch(filterConfig->scale)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <CAN_InitFilterBank+0xb8>
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d057      	beq.n	8001c72 <CAN_InitFilterBank+0x166>
							);
						break;
					}
				break;
			}
		break;
 8001bc2:	e1f9      	b.n	8001fb8 <CAN_InitFilterBank+0x4ac>
					CLR_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 16bit scale
 8001bc4:	4b7f      	ldr	r3, [pc, #508]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001bc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	4619      	mov	r1, r3
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	408b      	lsls	r3, r1
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	497b      	ldr	r1, [pc, #492]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						(((u32)filterConfig->accepted[0].frameType)<<4)   |  // RTR
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7b5b      	ldrb	r3, [r3, #13]
						((0UL)<<3)  |  // standard ID
 8001be2:	011a      	lsls	r2, r3, #4
						(((u32)filterConfig->accepted[0].id)<<5)          |  // ID
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	015b      	lsls	r3, r3, #5
						(((u32)filterConfig->accepted[0].frameType)<<4)   |  // RTR
 8001bea:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[0].maskIdType))<<19) |  // standard ID
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	7b92      	ldrb	r2, [r2, #14]
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	d102      	bne.n	8001bfa <CAN_InitFilterBank+0xee>
 8001bf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bf8:	e000      	b.n	8001bfc <CAN_InitFilterBank+0xf0>
 8001bfa:	2200      	movs	r2, #0
						(((u32)filterConfig->accepted[0].id)<<5)          |  // ID
 8001bfc:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<20)  |  // RTR
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	7bd2      	ldrb	r2, [r2, #15]
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d102      	bne.n	8001c0c <CAN_InitFilterBank+0x100>
 8001c06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c0a:	e000      	b.n	8001c0e <CAN_InitFilterBank+0x102>
 8001c0c:	2200      	movs	r2, #0
						(((u32)(!filterConfig->accepted[0].maskIdType))<<19) |  // standard ID
 8001c0e:	431a      	orrs	r2, r3
						(((u32)filterConfig->accepted[0].mask)<<21)       // ID mask
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	055b      	lsls	r3, r3, #21
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001c16:	486b      	ldr	r0, [pc, #428]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	7809      	ldrb	r1, [r1, #0]
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<20)  |  // RTR
 8001c1c:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001c1e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001c22:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						(((u32)filterConfig->accepted[1].frameType)<<4)  |  // RTR
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7e5b      	ldrb	r3, [r3, #25]
						((0UL)<<3)  |  // standard ID
 8001c2a:	011a      	lsls	r2, r3, #4
						(((u32)filterConfig->accepted[1].id)<<5)    |   // ID
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	015b      	lsls	r3, r3, #5
						(((u32)filterConfig->accepted[1].frameType)<<4)  |  // RTR
 8001c32:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[1].maskIdType))<<19)  |  // standard ID
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	7e92      	ldrb	r2, [r2, #26]
 8001c38:	2a00      	cmp	r2, #0
 8001c3a:	d102      	bne.n	8001c42 <CAN_InitFilterBank+0x136>
 8001c3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c40:	e000      	b.n	8001c44 <CAN_InitFilterBank+0x138>
 8001c42:	2200      	movs	r2, #0
						(((u32)filterConfig->accepted[1].id)<<5)    |   // ID
 8001c44:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[1].maskFrameType))<<20)  |  // RTR
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	7ed2      	ldrb	r2, [r2, #27]
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d102      	bne.n	8001c54 <CAN_InitFilterBank+0x148>
 8001c4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c52:	e000      	b.n	8001c56 <CAN_InitFilterBank+0x14a>
 8001c54:	2200      	movs	r2, #0
						(((u32)(!filterConfig->accepted[1].maskIdType))<<19)  |  // standard ID
 8001c56:	431a      	orrs	r2, r3
						(((u32)filterConfig->accepted[1].mask)<<21)       // ID mask
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	055b      	lsls	r3, r3, #21
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001c5e:	4859      	ldr	r0, [pc, #356]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	7809      	ldrb	r1, [r1, #0]
						(((u32)(!filterConfig->accepted[1].maskFrameType))<<20)  |  // RTR
 8001c64:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001c66:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4403      	add	r3, r0
 8001c6e:	605a      	str	r2, [r3, #4]
				break;
 8001c70:	e094      	b.n	8001d9c <CAN_InitFilterBank+0x290>
					SET_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 32bit scale
 8001c72:	4b54      	ldr	r3, [pc, #336]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001c74:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	2301      	movs	r3, #1
 8001c80:	408b      	lsls	r3, r1
 8001c82:	4950      	ldr	r1, [pc, #320]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						(((u32)filterConfig->accepted[0].frameType)<<1)  |  // RTR
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7b5b      	ldrb	r3, [r3, #13]
 8001c8e:	005a      	lsls	r2, r3, #1
						(((u32)filterConfig->accepted[0].idType)<<2)     |  // IDE
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	7b1b      	ldrb	r3, [r3, #12]
 8001c94:	009b      	lsls	r3, r3, #2
						(((u32)filterConfig->accepted[0].frameType)<<1)  |  // RTR
 8001c96:	4313      	orrs	r3, r2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001c98:	494a      	ldr	r1, [pc, #296]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	7812      	ldrb	r2, [r2, #0]
 8001c9e:	4610      	mov	r0, r2
						(((u32)filterConfig->accepted[0].idType)<<2)     |  // IDE
 8001ca0:	f063 023f 	orn	r2, r3, #63	; 0x3f
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001ca4:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8001ca8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<1)  |  // RTR
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7bdb      	ldrb	r3, [r3, #15]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <CAN_InitFilterBank+0x1ac>
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	e000      	b.n	8001cba <CAN_InitFilterBank+0x1ae>
 8001cb8:	2200      	movs	r2, #0
						(((u32)(!filterConfig->accepted[0].maskIdType))<<2)     |  // IDE
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7b9b      	ldrb	r3, [r3, #14]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <CAN_InitFilterBank+0x1ba>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e000      	b.n	8001cc8 <CAN_InitFilterBank+0x1bc>
 8001cc6:	2300      	movs	r3, #0
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<1)  |  // RTR
 8001cc8:	4313      	orrs	r3, r2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001cca:	493e      	ldr	r1, [pc, #248]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	4610      	mov	r0, r2
						(((u32)(!filterConfig->accepted[0].maskIdType))<<2)     |  // IDE
 8001cd2:	f063 023f 	orn	r2, r3, #63	; 0x3f
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001cd6:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	605a      	str	r2, [r3, #4]
					switch(filterConfig->accepted[0].idType)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7b1b      	ldrb	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <CAN_InitFilterBank+0x1e2>
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d02d      	beq.n	8001d48 <CAN_InitFilterBank+0x23c>
				break;
 8001cec:	e055      	b.n	8001d9a <CAN_InitFilterBank+0x28e>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 8001cee:	4a35      	ldr	r2, [pc, #212]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3348      	adds	r3, #72	; 0x48
 8001cf6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								((filterConfig->accepted[0].id)<<21)    |  // standard  ID
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	055b      	lsls	r3, r3, #21
 8001d00:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8001d04:	ea6f 5343 	mvn.w	r3, r3, lsl #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 8001d08:	482e      	ldr	r0, [pc, #184]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	7809      	ldrb	r1, [r1, #0]
 8001d0e:	401a      	ands	r2, r3
 8001d10:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001d14:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 8001d18:	4a2a      	ldr	r2, [pc, #168]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	3348      	adds	r3, #72	; 0x48
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	685a      	ldr	r2, [r3, #4]
								((filterConfig->accepted[0].mask)<<21)    |  // standard  ID
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	055b      	lsls	r3, r3, #21
 8001d2c:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8001d30:	ea6f 5343 	mvn.w	r3, r3, lsl #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 8001d34:	4823      	ldr	r0, [pc, #140]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	7809      	ldrb	r1, [r1, #0]
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4403      	add	r3, r0
 8001d44:	605a      	str	r2, [r3, #4]
						break;
 8001d46:	e028      	b.n	8001d9a <CAN_InitFilterBank+0x28e>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 8001d48:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	3348      	adds	r3, #72	; 0x48
 8001d50:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								(((u32)filterConfig->accepted[0].id)<<3)   |   // extended ID
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	f043 0307 	orr.w	r3, r3, #7
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 8001d5e:	4819      	ldr	r0, [pc, #100]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	7809      	ldrb	r1, [r1, #0]
 8001d64:	401a      	ands	r2, r3
 8001d66:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001d6a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 8001d6e:	4a15      	ldr	r2, [pc, #84]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	3348      	adds	r3, #72	; 0x48
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	685a      	ldr	r2, [r3, #4]
								(((u32)filterConfig->accepted[0].mask)<<3)     |  // extended ID
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	f043 0307 	orr.w	r3, r3, #7
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 8001d86:	480f      	ldr	r0, [pc, #60]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	7809      	ldrb	r1, [r1, #0]
 8001d8c:	401a      	ands	r2, r3
 8001d8e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4403      	add	r3, r0
 8001d96:	605a      	str	r2, [r3, #4]
						break;
 8001d98:	bf00      	nop
				break;
 8001d9a:	bf00      	nop
		break;
 8001d9c:	e10c      	b.n	8001fb8 <CAN_InitFilterBank+0x4ac>

		case ID_LIST:
			SET_BIT(CAN1->FM1R, filterConfig->filterBankNum);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	2301      	movs	r3, #1
 8001dac:	408b      	lsls	r3, r1
 8001dae:	4905      	ldr	r1, [pc, #20]	; (8001dc4 <CAN_InitFilterBank+0x2b8>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204

			switch(filterConfig->scale)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	785b      	ldrb	r3, [r3, #1]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d004      	beq.n	8001dc8 <CAN_InitFilterBank+0x2bc>
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d075      	beq.n	8001eae <CAN_InitFilterBank+0x3a2>
							);
						break;
					}
				break;
			}
		break;
 8001dc2:	e0f8      	b.n	8001fb6 <CAN_InitFilterBank+0x4aa>
 8001dc4:	40006400 	.word	0x40006400
					CLR_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 16bit scale
 8001dc8:	4b88      	ldr	r3, [pc, #544]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001dca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	408b      	lsls	r3, r1
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	4984      	ldr	r1, [pc, #528]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						((filterConfig->accepted[0].idType)<<3)  |  // standard ID
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7b1b      	ldrb	r3, [r3, #12]
 8001de6:	00da      	lsls	r2, r3, #3
						((filterConfig->accepted[0].frameType)<<4)  |  // RTR
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7b5b      	ldrb	r3, [r3, #13]
 8001dec:	011b      	lsls	r3, r3, #4
						((filterConfig->accepted[0].idType)<<3)  |  // standard ID
 8001dee:	4313      	orrs	r3, r2
 8001df0:	461c      	mov	r4, r3
						((filterConfig->accepted[0].id)<<5)    // ID
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	015b      	lsls	r3, r3, #5
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001df8:	497c      	ldr	r1, [pc, #496]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	4610      	mov	r0, r2
						((filterConfig->accepted[0].frameType)<<4)  |  // RTR
 8001e00:	ea44 0203 	orr.w	r2, r4, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001e04:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8001e08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8001e0c:	4a77      	ldr	r2, [pc, #476]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	3348      	adds	r3, #72	; 0x48
 8001e14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
						((filterConfig->accepted[1].idType)<<19)  |  // standard ID
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	7e1b      	ldrb	r3, [r3, #24]
 8001e1c:	04d9      	lsls	r1, r3, #19
						((filterConfig->accepted[1].frameType)<<20)  |  // RTR
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7e5b      	ldrb	r3, [r3, #25]
 8001e22:	051b      	lsls	r3, r3, #20
						((filterConfig->accepted[1].idType)<<19)  |  // standard ID
 8001e24:	430b      	orrs	r3, r1
 8001e26:	4619      	mov	r1, r3
						((filterConfig->accepted[1].id)<<21)    // ID
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	055b      	lsls	r3, r3, #21
						((filterConfig->accepted[1].frameType)<<20)  |  // RTR
 8001e2e:	430b      	orrs	r3, r1
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8001e30:	486e      	ldr	r0, [pc, #440]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	7809      	ldrb	r1, [r1, #0]
 8001e36:	431a      	orrs	r2, r3
 8001e38:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001e3c:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						((filterConfig->accepted[2].idType)<<3)  |  // standard ID
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e46:	00da      	lsls	r2, r3, #3
						((filterConfig->accepted[2].frameType)<<4)  |  // RTR
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e4e:	011b      	lsls	r3, r3, #4
						((filterConfig->accepted[2].idType)<<3)  |  // standard ID
 8001e50:	4313      	orrs	r3, r2
 8001e52:	461c      	mov	r4, r3
						((filterConfig->accepted[2].id)<<5)    // ID
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	015b      	lsls	r3, r3, #5
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001e5a:	4964      	ldr	r1, [pc, #400]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	4610      	mov	r0, r2
						((filterConfig->accepted[2].frameType)<<4)  |  // RTR
 8001e62:	ea44 0203 	orr.w	r2, r4, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001e66:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	605a      	str	r2, [r3, #4]
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8001e70:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	3348      	adds	r3, #72	; 0x48
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	685a      	ldr	r2, [r3, #4]
						((filterConfig->accepted[3].idType)<<19)  |  // standard ID
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e84:	04d9      	lsls	r1, r3, #19
						((filterConfig->accepted[3].frameType)<<20)  |  // RTR
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001e8c:	051b      	lsls	r3, r3, #20
						((filterConfig->accepted[3].idType)<<19)  |  // standard ID
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	4619      	mov	r1, r3
						((filterConfig->accepted[3].id)<<21)    // ID
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	055b      	lsls	r3, r3, #21
						((filterConfig->accepted[3].frameType)<<20)  |  // RTR
 8001e98:	430b      	orrs	r3, r1
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8001e9a:	4854      	ldr	r0, [pc, #336]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	7809      	ldrb	r1, [r1, #0]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4403      	add	r3, r0
 8001eaa:	605a      	str	r2, [r3, #4]
				break;
 8001eac:	e083      	b.n	8001fb6 <CAN_InitFilterBank+0x4aa>
					SET_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 32bit scale
 8001eae:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001eb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	2301      	movs	r3, #1
 8001ebc:	408b      	lsls	r3, r1
 8001ebe:	494b      	ldr	r1, [pc, #300]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						((u32)(filterConfig->accepted[0].frameType)<<1)  |  // RTR
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7b5b      	ldrb	r3, [r3, #13]
 8001eca:	005a      	lsls	r2, r3, #1
						((u32)(filterConfig->accepted[0].idType)<<2)    // IDE
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7b1b      	ldrb	r3, [r3, #12]
 8001ed0:	009b      	lsls	r3, r3, #2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001ed2:	4846      	ldr	r0, [pc, #280]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	7809      	ldrb	r1, [r1, #0]
						((u32)(filterConfig->accepted[0].frameType)<<1)  |  // RTR
 8001ed8:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8001eda:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001ede:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
					switch(filterConfig->accepted[0].idType)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7b1b      	ldrb	r3, [r3, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <CAN_InitFilterBank+0x3e4>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d012      	beq.n	8001f14 <CAN_InitFilterBank+0x408>
 8001eee:	e023      	b.n	8001f38 <CAN_InitFilterBank+0x42c>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8001ef0:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	3348      	adds	r3, #72	; 0x48
 8001ef8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								((u32)(filterConfig->accepted[0].id)<<21)    // ID
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	055b      	lsls	r3, r3, #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8001f02:	483a      	ldr	r0, [pc, #232]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	7809      	ldrb	r1, [r1, #0]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001f0e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						break;
 8001f12:	e011      	b.n	8001f38 <CAN_InitFilterBank+0x42c>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8001f14:	4a35      	ldr	r2, [pc, #212]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	3348      	adds	r3, #72	; 0x48
 8001f1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								((u32)(filterConfig->accepted[0].id)<<3)    // ID
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	00db      	lsls	r3, r3, #3
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8001f26:	4831      	ldr	r0, [pc, #196]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	7809      	ldrb	r1, [r1, #0]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001f32:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						break;
 8001f36:	bf00      	nop
						((u32)(filterConfig->accepted[1].frameType)<<1)  |  // RTR
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7e5b      	ldrb	r3, [r3, #25]
 8001f3c:	005a      	lsls	r2, r3, #1
						((u32)(filterConfig->accepted[1].idType)<<2)    // IDE
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7e1b      	ldrb	r3, [r3, #24]
 8001f42:	009b      	lsls	r3, r3, #2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001f44:	4829      	ldr	r0, [pc, #164]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	7809      	ldrb	r1, [r1, #0]
						((u32)(filterConfig->accepted[1].frameType)<<1)  |  // RTR
 8001f4a:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8001f4c:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4403      	add	r3, r0
 8001f54:	605a      	str	r2, [r3, #4]
					switch(filterConfig->accepted[1].idType)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7e1b      	ldrb	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <CAN_InitFilterBank+0x458>
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d014      	beq.n	8001f8c <CAN_InitFilterBank+0x480>
				break;
 8001f62:	e027      	b.n	8001fb4 <CAN_InitFilterBank+0x4a8>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	3348      	adds	r3, #72	; 0x48
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	685a      	ldr	r2, [r3, #4]
								((u32)(filterConfig->accepted[1].id)<<21)    // ID
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	055b      	lsls	r3, r3, #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8001f78:	481c      	ldr	r0, [pc, #112]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	7809      	ldrb	r1, [r1, #0]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4403      	add	r3, r0
 8001f88:	605a      	str	r2, [r3, #4]
						break;
 8001f8a:	e013      	b.n	8001fb4 <CAN_InitFilterBank+0x4a8>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8001f8c:	4a17      	ldr	r2, [pc, #92]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	3348      	adds	r3, #72	; 0x48
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	685a      	ldr	r2, [r3, #4]
								((u32)(filterConfig->accepted[1].id)<<3)    // ID
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8001fa0:	4812      	ldr	r0, [pc, #72]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	7809      	ldrb	r1, [r1, #0]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4403      	add	r3, r0
 8001fb0:	605a      	str	r2, [r3, #4]
						break;
 8001fb2:	bf00      	nop
				break;
 8001fb4:	bf00      	nop
		break;
 8001fb6:	bf00      	nop
	}



	SET_BIT(CAN1->FA1R, filterConfig->filterBankNum);		// activate filter
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001fba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	408b      	lsls	r3, r1
 8001fc8:	4908      	ldr	r1, [pc, #32]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	CLR_BIT(CAN1->FMR, 0);	// exit filter initialization mode
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <CAN_InitFilterBank+0x4e0>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8001fe0:	e000      	b.n	8001fe4 <CAN_InitFilterBank+0x4d8>
		return;
 8001fe2:	bf00      	nop
}
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc90      	pop	{r4, r7}
 8001fea:	4770      	bx	lr
 8001fec:	40006400 	.word	0x40006400

08001ff0 <CAN_Tx>:




void CAN_Tx(CAN_Frame_t* frame)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	/* wait while all three mailboxes are busy (bits 26, 27, 28 are 0) */
	while((((CAN1->TSR)>>26) & 0x7) == 0);
 8001ff8:	bf00      	nop
 8001ffa:	4b78      	ldr	r3, [pc, #480]	; (80021dc <CAN_Tx+0x1ec>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f8      	beq.n	8001ffa <CAN_Tx+0xa>

	u8 freeMailBox = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
	for(u8 i = 0; i < 3; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	73bb      	strb	r3, [r7, #14]
 8002010:	e00f      	b.n	8002032 <CAN_Tx+0x42>
	{
		if(GET_BIT(CAN1->TSR, i + 26) == 1)
 8002012:	4b72      	ldr	r3, [pc, #456]	; (80021dc <CAN_Tx+0x1ec>)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	7bbb      	ldrb	r3, [r7, #14]
 8002018:	331a      	adds	r3, #26
 800201a:	fa22 f303 	lsr.w	r3, r2, r3
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <CAN_Tx+0x3c>
		{
			freeMailBox = i;
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	73fb      	strb	r3, [r7, #15]
			break;
 800202a:	e005      	b.n	8002038 <CAN_Tx+0x48>
	for(u8 i = 0; i < 3; i++)
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	3301      	adds	r3, #1
 8002030:	73bb      	strb	r3, [r7, #14]
 8002032:	7bbb      	ldrb	r3, [r7, #14]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d9ec      	bls.n	8002012 <CAN_Tx+0x22>
		}
	}

	/* fill lowest 4 bytes of data in TDLR register */
	CAN1->sTxMailBox[freeMailBox].TDLR = 0;
 8002038:	4a68      	ldr	r2, [pc, #416]	; (80021dc <CAN_Tx+0x1ec>)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	011b      	lsls	r3, r3, #4
 800203e:	4413      	add	r3, r2
 8002040:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	737b      	strb	r3, [r7, #13]
 800204c:	e01b      	b.n	8002086 <CAN_Tx+0x96>
	{
		CAN1->sTxMailBox[freeMailBox].TDLR |= (frame->data[i])<<(i<<3);
 800204e:	4a63      	ldr	r2, [pc, #396]	; (80021dc <CAN_Tx+0x1ec>)
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	4413      	add	r3, r2
 8002056:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	7b7b      	ldrb	r3, [r7, #13]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	440b      	add	r3, r1
 8002062:	79db      	ldrb	r3, [r3, #7]
 8002064:	4619      	mov	r1, r3
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	4618      	mov	r0, r3
 8002070:	495a      	ldr	r1, [pc, #360]	; (80021dc <CAN_Tx+0x1ec>)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	4302      	orrs	r2, r0
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	440b      	add	r3, r1
 800207a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800207e:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 8002080:	7b7b      	ldrb	r3, [r7, #13]
 8002082:	3301      	adds	r3, #1
 8002084:	737b      	strb	r3, [r7, #13]
 8002086:	7b7b      	ldrb	r3, [r7, #13]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d9e0      	bls.n	800204e <CAN_Tx+0x5e>
	}

	/* fill highest 4 bytes of data in TDHR register */
	CAN1->sTxMailBox[freeMailBox].TDHR = 0;
 800208c:	4a53      	ldr	r2, [pc, #332]	; (80021dc <CAN_Tx+0x1ec>)
 800208e:	7bfb      	ldrb	r3, [r7, #15]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4413      	add	r3, r2
 8002094:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 800209c:	2300      	movs	r3, #0
 800209e:	733b      	strb	r3, [r7, #12]
 80020a0:	e01c      	b.n	80020dc <CAN_Tx+0xec>
	{
		CAN1->sTxMailBox[freeMailBox].TDHR |= (frame->data[i + 4])<<(i<<3);
 80020a2:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <CAN_Tx+0x1ec>)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	7b3b      	ldrb	r3, [r7, #12]
 80020b2:	3304      	adds	r3, #4
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	440b      	add	r3, r1
 80020b8:	79db      	ldrb	r3, [r3, #7]
 80020ba:	4619      	mov	r1, r3
 80020bc:	7b3b      	ldrb	r3, [r7, #12]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	4945      	ldr	r1, [pc, #276]	; (80021dc <CAN_Tx+0x1ec>)
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	4302      	orrs	r2, r0
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	440b      	add	r3, r1
 80020d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020d4:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	733b      	strb	r3, [r7, #12]
 80020dc:	7b3b      	ldrb	r3, [r7, #12]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d9df      	bls.n	80020a2 <CAN_Tx+0xb2>
	}

	CAN1->sTxMailBox[freeMailBox].TDTR = frame->DLC;			// Data Lenght Code (DLC)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	7999      	ldrb	r1, [r3, #6]
 80020e6:	4a3d      	ldr	r2, [pc, #244]	; (80021dc <CAN_Tx+0x1ec>)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	3318      	adds	r3, #24
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	4413      	add	r3, r2
 80020f0:	3304      	adds	r3, #4
 80020f2:	6019      	str	r1, [r3, #0]


	/* configure IDE & RTR */
	CAN1->sTxMailBox[freeMailBox].TIR = (
		((frame->frameType)<<1)  |   // RTR
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	795b      	ldrb	r3, [r3, #5]
 80020f8:	005a      	lsls	r2, r3, #1
		((frame->idType)<<2)         // IDE
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
		((frame->frameType)<<1)  |   // RTR
 8002100:	ea42 0103 	orr.w	r1, r2, r3
	CAN1->sTxMailBox[freeMailBox].TIR = (
 8002104:	4a35      	ldr	r2, [pc, #212]	; (80021dc <CAN_Tx+0x1ec>)
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	3318      	adds	r3, #24
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	6019      	str	r1, [r3, #0]
	);

	/* configure ID */
	switch(frame->idType)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <CAN_Tx+0x12e>
 8002118:	2b01      	cmp	r3, #1
 800211a:	d011      	beq.n	8002140 <CAN_Tx+0x150>
 800211c:	e021      	b.n	8002162 <CAN_Tx+0x172>
	{
		case STANDARD_ID:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<21;
 800211e:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <CAN_Tx+0x1ec>)
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3318      	adds	r3, #24
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	6819      	ldr	r1, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	055a      	lsls	r2, r3, #21
 8002130:	482a      	ldr	r0, [pc, #168]	; (80021dc <CAN_Tx+0x1ec>)
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	430a      	orrs	r2, r1
 8002136:	3318      	adds	r3, #24
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4403      	add	r3, r0
 800213c:	601a      	str	r2, [r3, #0]
		break;
 800213e:	e010      	b.n	8002162 <CAN_Tx+0x172>

		case EXTENDED_ID:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<3;
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <CAN_Tx+0x1ec>)
 8002142:	7bfb      	ldrb	r3, [r7, #15]
 8002144:	3318      	adds	r3, #24
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4413      	add	r3, r2
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	00da      	lsls	r2, r3, #3
 8002152:	4822      	ldr	r0, [pc, #136]	; (80021dc <CAN_Tx+0x1ec>)
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	430a      	orrs	r2, r1
 8002158:	3318      	adds	r3, #24
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4403      	add	r3, r0
 800215e:	601a      	str	r2, [r3, #0]
		break;
 8002160:	bf00      	nop
	}


	switch(frame->frameType)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	795b      	ldrb	r3, [r3, #5]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <CAN_Tx+0x180>
 800216a:	2b01      	cmp	r3, #1
 800216c:	d011      	beq.n	8002192 <CAN_Tx+0x1a2>
 800216e:	e021      	b.n	80021b4 <CAN_Tx+0x1c4>
	{
		case DATA_FRAME:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<21;
 8002170:	4a1a      	ldr	r2, [pc, #104]	; (80021dc <CAN_Tx+0x1ec>)
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	3318      	adds	r3, #24
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	055a      	lsls	r2, r3, #21
 8002182:	4816      	ldr	r0, [pc, #88]	; (80021dc <CAN_Tx+0x1ec>)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	430a      	orrs	r2, r1
 8002188:	3318      	adds	r3, #24
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4403      	add	r3, r0
 800218e:	601a      	str	r2, [r3, #0]
		break;
 8002190:	e010      	b.n	80021b4 <CAN_Tx+0x1c4>

		case REMOTE_FRAME:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<3;
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <CAN_Tx+0x1ec>)
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	3318      	adds	r3, #24
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4413      	add	r3, r2
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	00da      	lsls	r2, r3, #3
 80021a4:	480d      	ldr	r0, [pc, #52]	; (80021dc <CAN_Tx+0x1ec>)
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	3318      	adds	r3, #24
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4403      	add	r3, r0
 80021b0:	601a      	str	r2, [r3, #0]
		break;
 80021b2:	bf00      	nop
	}


	SET_BIT(CAN1->sTxMailBox[freeMailBox].TIR, 0);	// Tx request
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <CAN_Tx+0x1ec>)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	3318      	adds	r3, #24
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4413      	add	r3, r2
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4906      	ldr	r1, [pc, #24]	; (80021dc <CAN_Tx+0x1ec>)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	f042 0201 	orr.w	r2, r2, #1
 80021c8:	3318      	adds	r3, #24
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	440b      	add	r3, r1
 80021ce:	601a      	str	r2, [r3, #0]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40006400 	.word	0x40006400

080021e0 <CAN_Rx>:


void CAN_Rx(CAN_Frame_t* frame, CAN_RxFifo_t fifo)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	70fb      	strb	r3, [r7, #3]
	// wait until there's received data in FIFO
	switch(fifo)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <CAN_Rx+0x18>
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d008      	beq.n	8002208 <CAN_Rx+0x28>
 80021f6:	e00f      	b.n	8002218 <CAN_Rx+0x38>
	{
		case FIFO_0:
			while((CAN1->RF0R & 0x3) == 0);
 80021f8:	bf00      	nop
 80021fa:	4b57      	ldr	r3, [pc, #348]	; (8002358 <CAN_Rx+0x178>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f9      	beq.n	80021fa <CAN_Rx+0x1a>
		break;
 8002206:	e007      	b.n	8002218 <CAN_Rx+0x38>

		case FIFO_1:
			while((CAN1->RF1R & 0x3) == 0);
 8002208:	bf00      	nop
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <CAN_Rx+0x178>)
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f9      	beq.n	800220a <CAN_Rx+0x2a>
		break;
 8002216:	bf00      	nop
	}


	/* read frame type (RTR) */
	switch(GET_BIT(CAN1->sFIFOMailBox[fifo].RIR, 1))
 8002218:	4a4f      	ldr	r2, [pc, #316]	; (8002358 <CAN_Rx+0x178>)
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	331b      	adds	r3, #27
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <CAN_Rx+0x54>
 800222e:	2b01      	cmp	r3, #1
 8002230:	d004      	beq.n	800223c <CAN_Rx+0x5c>
 8002232:	e007      	b.n	8002244 <CAN_Rx+0x64>
	{
		case 0:
			frame->frameType = DATA_FRAME;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	715a      	strb	r2, [r3, #5]
		break;
 800223a:	e003      	b.n	8002244 <CAN_Rx+0x64>

		case 1:
			frame->frameType = REMOTE_FRAME;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	715a      	strb	r2, [r3, #5]
		break;
 8002242:	bf00      	nop
	}


	/* read ID type (IDE) */
	switch(GET_BIT(CAN1->sFIFOMailBox[fifo].RIR, 2))
 8002244:	4a44      	ldr	r2, [pc, #272]	; (8002358 <CAN_Rx+0x178>)
 8002246:	78fb      	ldrb	r3, [r7, #3]
 8002248:	331b      	adds	r3, #27
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	4413      	add	r3, r2
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <CAN_Rx+0x80>
 800225a:	2b01      	cmp	r3, #1
 800225c:	d004      	beq.n	8002268 <CAN_Rx+0x88>
 800225e:	e007      	b.n	8002270 <CAN_Rx+0x90>
	{
		case 0:
			frame->idType = STANDARD_ID;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	711a      	strb	r2, [r3, #4]
		break;
 8002266:	e003      	b.n	8002270 <CAN_Rx+0x90>

		case 1:
			frame->idType = EXTENDED_ID;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	711a      	strb	r2, [r3, #4]
		break;
 800226e:	bf00      	nop
	}


	/* read ID */
	switch(frame->idType)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <CAN_Rx+0x9e>
 8002278:	2b01      	cmp	r3, #1
 800227a:	d00a      	beq.n	8002292 <CAN_Rx+0xb2>
 800227c:	e013      	b.n	80022a6 <CAN_Rx+0xc6>
	{
		case STANDARD_ID:
			frame->id = (CAN1->sFIFOMailBox[fifo].RIR)>>21;
 800227e:	4a36      	ldr	r2, [pc, #216]	; (8002358 <CAN_Rx+0x178>)
 8002280:	78fb      	ldrb	r3, [r7, #3]
 8002282:	331b      	adds	r3, #27
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0d5a      	lsrs	r2, r3, #21
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
		break;
 8002290:	e009      	b.n	80022a6 <CAN_Rx+0xc6>

		case 1:
			frame->id = (CAN1->sFIFOMailBox[fifo].RIR)>>3;
 8002292:	4a31      	ldr	r2, [pc, #196]	; (8002358 <CAN_Rx+0x178>)
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	331b      	adds	r3, #27
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4413      	add	r3, r2
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	601a      	str	r2, [r3, #0]
		break;
 80022a4:	bf00      	nop
	}


	/* read DLC */
	frame->DLC = (CAN1->sFIFOMailBox[fifo].RDTR) & 0xF;
 80022a6:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <CAN_Rx+0x178>)
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	331b      	adds	r3, #27
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	719a      	strb	r2, [r3, #6]



	/* read lower 4 bytes of data from RDLR register */
	for(u8 i = 0; i < 4; i++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	e012      	b.n	80022ec <CAN_Rx+0x10c>
	{
		frame->data[i] = (CAN1->sFIFOMailBox[fifo].RDLR)>>(i<<3);
 80022c6:	4a24      	ldr	r2, [pc, #144]	; (8002358 <CAN_Rx+0x178>)
 80022c8:	78fb      	ldrb	r3, [r7, #3]
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	40da      	lsrs	r2, r3
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	b2d1      	uxtb	r1, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	460a      	mov	r2, r1
 80022e4:	71da      	strb	r2, [r3, #7]
	for(u8 i = 0; i < 4; i++)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3301      	adds	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d9e9      	bls.n	80022c6 <CAN_Rx+0xe6>
	}

	/* read higher 4 bytes of data from RDHR register */
	for(u8 i = 0; i < 4; i++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	73bb      	strb	r3, [r7, #14]
 80022f6:	e013      	b.n	8002320 <CAN_Rx+0x140>
	{
		frame->data[i + 4] = (CAN1->sFIFOMailBox[fifo].RDHR)>>(i<<3);
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <CAN_Rx+0x178>)
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	40da      	lsrs	r2, r3
 800230c:	7bbb      	ldrb	r3, [r7, #14]
 800230e:	3304      	adds	r3, #4
 8002310:	b2d1      	uxtb	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	460a      	mov	r2, r1
 8002318:	71da      	strb	r2, [r3, #7]
	for(u8 i = 0; i < 4; i++)
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	3301      	adds	r3, #1
 800231e:	73bb      	strb	r3, [r7, #14]
 8002320:	7bbb      	ldrb	r3, [r7, #14]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d9e8      	bls.n	80022f8 <CAN_Rx+0x118>
	}


	/* release FIFO (pop first message) */
	switch(fifo)
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <CAN_Rx+0x152>
 800232c:	2b01      	cmp	r3, #1
 800232e:	d007      	beq.n	8002340 <CAN_Rx+0x160>

		case FIFO_1:
			SET_BIT(CAN1->RF1R, 5);
		break;
	}
}
 8002330:	e00d      	b.n	800234e <CAN_Rx+0x16e>
			SET_BIT(CAN1->RF0R, 5);
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <CAN_Rx+0x178>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <CAN_Rx+0x178>)
 8002338:	f043 0320 	orr.w	r3, r3, #32
 800233c:	60d3      	str	r3, [r2, #12]
		break;
 800233e:	e006      	b.n	800234e <CAN_Rx+0x16e>
			SET_BIT(CAN1->RF1R, 5);
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <CAN_Rx+0x178>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <CAN_Rx+0x178>)
 8002346:	f043 0320 	orr.w	r3, r3, #32
 800234a:	6113      	str	r3, [r2, #16]
		break;
 800234c:	bf00      	nop
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40006400 	.word	0x40006400

0800235c <ECU_UpdateConfig>:
	ecuConfig.activeBootRegion  =  FPEC_ReadByte(ACTIVE_BOOT_PAGE_NUMBER, ACTIVE_BOOT_BYTE_OFFSET);
}


void  ECU_UpdateConfig(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
	FPEC_WriteByte(ACTIVE_APP_PAGE_NUMBER , ACTIVE_APP_BYTE_OFFSET , ecuConfig.activeAppRegion);
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <ECU_UpdateConfig+0x24>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	2102      	movs	r1, #2
 8002368:	2005      	movs	r0, #5
 800236a:	f000 fa03 	bl	8002774 <FPEC_WriteByte>
	FPEC_WriteByte(ACTIVE_BOOT_PAGE_NUMBER, ACTIVE_BOOT_BYTE_OFFSET, ecuConfig.activeBootRegion);
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <ECU_UpdateConfig+0x24>)
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	461a      	mov	r2, r3
 8002374:	2101      	movs	r1, #1
 8002376:	2005      	movs	r0, #5
 8002378:	f000 f9fc 	bl	8002774 <FPEC_WriteByte>
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	20000044 	.word	0x20000044

08002384 <ECU_ConfigActivateApp>:


void  ECU_ConfigActivateApp(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	FPEC_WriteByte(BRANCHING_PAGE_NUMBER, BRANCHING_BYTE_OFFSET, APP);
 8002388:	2241      	movs	r2, #65	; 0x41
 800238a:	2100      	movs	r1, #0
 800238c:	2005      	movs	r0, #5
 800238e:	f000 f9f1 	bl	8002774 <FPEC_WriteByte>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <FPEC_UnlockFlash>:
  * @brief  Unlock the Embedded Flash.
  * @param  None.
  * @retval None.
  */
static void  FPEC_UnlockFlash(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
	FLASH->KEYR = KEY1;  //write KEY1
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <FPEC_UnlockFlash+0x18>)
 800239e:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <FPEC_UnlockFlash+0x1c>)
 80023a0:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = KEY2;  //write KEY2
 80023a2:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <FPEC_UnlockFlash+0x18>)
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <FPEC_UnlockFlash+0x20>)
 80023a6:	605a      	str	r2, [r3, #4]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	40022000 	.word	0x40022000
 80023b4:	45670123 	.word	0x45670123
 80023b8:	cdef89ab 	.word	0xcdef89ab

080023bc <FPEC_LockFlash>:
  * @brief  Lock the Embedded Flash.
  * @param  None.
  * @retval None.
  */
static void  FPEC_LockFlash(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
	SET_BIT(FLASH->CR, 7);
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <FPEC_LockFlash+0x18>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a03      	ldr	r2, [pc, #12]	; (80023d4 <FPEC_LockFlash+0x18>)
 80023c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ca:	6113      	str	r3, [r2, #16]
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40022000 	.word	0x40022000

080023d8 <FPEC_CheckErrors>:
  * @brief  Check if any errors occurred while programming/erasing flash
  * @param  None
  * @retval Flash error
  */
static FPEC_Error_t  FPEC_CheckErrors(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
	if(GET_BIT(FLASH->SR, 4) == 1)
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <FPEC_CheckErrors+0x4c>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <FPEC_CheckErrors+0x22>
	{
		SET_BIT(FLASH->SR, 4);  //clear flag
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <FPEC_CheckErrors+0x4c>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <FPEC_CheckErrors+0x4c>)
 80023f0:	f043 0310 	orr.w	r3, r3, #16
 80023f4:	60d3      	str	r3, [r2, #12]
		return  FPEC_WRITE_PROTECTION_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e00f      	b.n	800241a <FPEC_CheckErrors+0x42>
	}
	if(GET_BIT(FLASH->SR, 2) == 1)
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <FPEC_CheckErrors+0x4c>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <FPEC_CheckErrors+0x40>
	{
		SET_BIT(FLASH->SR, 2);  //clear flag
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <FPEC_CheckErrors+0x4c>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a05      	ldr	r2, [pc, #20]	; (8002424 <FPEC_CheckErrors+0x4c>)
 800240e:	f043 0304 	orr.w	r3, r3, #4
 8002412:	60d3      	str	r3, [r2, #12]
		return  FPEC_PROGRAMMING_ERROR;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <FPEC_CheckErrors+0x42>
	}
	return FPEC_NO_ERRORS;
 8002418:	2302      	movs	r3, #2
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40022000 	.word	0x40022000

08002428 <FPEC_DirectWriteHalfWord>:
  * @note   offsetAddress must be even number
  * @param  data: actual data you want to write.
  * @retval Flash error
  */
FPEC_Error_t  FPEC_DirectWriteHalfWord(u8 pageNumber, u16 offsetAddress, u16 data)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
 8002432:	460b      	mov	r3, r1
 8002434:	80bb      	strh	r3, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	807b      	strh	r3, [r7, #2]
	if(offsetAddress % 2 == 1)	return FPEC_PROGRAMMING_ERROR;
 800243a:	88bb      	ldrh	r3, [r7, #4]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <FPEC_DirectWriteHalfWord+0x22>
 8002446:	2300      	movs	r3, #0
 8002448:	e03d      	b.n	80024c6 <FPEC_DirectWriteHalfWord+0x9e>

	FPEC_Error_t writeStatus = FPEC_NO_ERRORS;
 800244a:	2302      	movs	r3, #2
 800244c:	73fb      	strb	r3, [r7, #15]

	FPEC_UnlockFlash();
 800244e:	f7ff ffa3 	bl	8002398 <FPEC_UnlockFlash>

	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8002452:	bf00      	nop
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <FPEC_DirectWriteHalfWord+0xa8>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d0f9      	beq.n	8002454 <FPEC_DirectWriteHalfWord+0x2c>

	SET_BIT(FLASH->CR, 0);   //Set bit 0 to select flash programming
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <FPEC_DirectWriteHalfWord+0xa8>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <FPEC_DirectWriteHalfWord+0xa8>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6113      	str	r3, [r2, #16]

	/* Get physical address of the desired half word */
	volatile u16* physicalAddress = (volatile u16*)(FLASH_BASE_ADDRESS + pageNumber * PAGE_SIZE_BYTES + offsetAddress);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	029b      	lsls	r3, r3, #10
 8002470:	461a      	mov	r2, r3
 8002472:	88bb      	ldrh	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800247a:	60bb      	str	r3, [r7, #8]
	*physicalAddress = data;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	801a      	strh	r2, [r3, #0]

	/* Wait until writing is completed */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8002482:	bf00      	nop
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <FPEC_DirectWriteHalfWord+0xa8>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d0f9      	beq.n	8002484 <FPEC_DirectWriteHalfWord+0x5c>

	CLR_BIT(FLASH->CR, 0);   //clear bit 0 to unselect flash programming
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <FPEC_DirectWriteHalfWord+0xa8>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <FPEC_DirectWriteHalfWord+0xa8>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6113      	str	r3, [r2, #16]

	/* Read the written half word to make sure it's written successfully */
	if(FPEC_ReadHalfWord(pageNumber, offsetAddress) == data)
 800249c:	88ba      	ldrh	r2, [r7, #4]
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	4611      	mov	r1, r2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f926 	bl	80026f4 <FPEC_ReadHalfWord>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d102      	bne.n	80024b8 <FPEC_DirectWriteHalfWord+0x90>
	{
		writeStatus = FPEC_NO_ERRORS;
 80024b2:	2302      	movs	r3, #2
 80024b4:	73fb      	strb	r3, [r7, #15]
 80024b6:	e003      	b.n	80024c0 <FPEC_DirectWriteHalfWord+0x98>
	}
	else
	{
		writeStatus =  FPEC_CheckErrors();
 80024b8:	f7ff ff8e 	bl	80023d8 <FPEC_CheckErrors>
 80024bc:	4603      	mov	r3, r0
 80024be:	73fb      	strb	r3, [r7, #15]
	}

	FPEC_LockFlash();
 80024c0:	f7ff ff7c 	bl	80023bc <FPEC_LockFlash>

	return writeStatus;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40022000 	.word	0x40022000

080024d4 <FPEC_DirectWriteByte>:
  * @param  offsetAddress: offset address of the half word you want to write.
  * @param  data: actual data you want to write.
  * @retval Flash error
  */
FPEC_Error_t  FPEC_DirectWriteByte(u8 pageNumber, u16 offsetAddress, u8 data)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
 80024de:	460b      	mov	r3, r1
 80024e0:	80bb      	strh	r3, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	71bb      	strb	r3, [r7, #6]
	FPEC_Error_t writeStatus = FPEC_NO_ERRORS;
 80024e6:	2302      	movs	r3, #2
 80024e8:	73fb      	strb	r3, [r7, #15]

	FPEC_UnlockFlash();
 80024ea:	f7ff ff55 	bl	8002398 <FPEC_UnlockFlash>

	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 80024ee:	bf00      	nop
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <FPEC_DirectWriteByte+0x98>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d0f9      	beq.n	80024f0 <FPEC_DirectWriteByte+0x1c>

	SET_BIT(FLASH->CR, 0);   //Set bit 0 to select flash programming
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <FPEC_DirectWriteByte+0x98>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4a1a      	ldr	r2, [pc, #104]	; (800256c <FPEC_DirectWriteByte+0x98>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6113      	str	r3, [r2, #16]

	/* Get physical address of the desired half word */
	volatile u8* physicalAddress = (volatile u8*)(FLASH_BASE_ADDRESS + pageNumber * PAGE_SIZE_BYTES + offsetAddress);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	461a      	mov	r2, r3
 800250e:	88bb      	ldrh	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002516:	60bb      	str	r3, [r7, #8]
	*physicalAddress = data;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	79ba      	ldrb	r2, [r7, #6]
 800251c:	701a      	strb	r2, [r3, #0]

	/* Wait until writing is completed */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 800251e:	bf00      	nop
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <FPEC_DirectWriteByte+0x98>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d0f9      	beq.n	8002520 <FPEC_DirectWriteByte+0x4c>

	CLR_BIT(FLASH->CR, 0);   //clear bit 0 to unselect flash programming
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <FPEC_DirectWriteByte+0x98>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4a0e      	ldr	r2, [pc, #56]	; (800256c <FPEC_DirectWriteByte+0x98>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	6113      	str	r3, [r2, #16]

	/* Read the written half word to make sure it's written successfully */
	if(FPEC_ReadByte(pageNumber, offsetAddress) == data)
 8002538:	88ba      	ldrh	r2, [r7, #4]
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f8fa 	bl	8002738 <FPEC_ReadByte>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	4293      	cmp	r3, r2
 800254c:	d102      	bne.n	8002554 <FPEC_DirectWriteByte+0x80>
	{
		writeStatus = FPEC_NO_ERRORS;
 800254e:	2302      	movs	r3, #2
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e003      	b.n	800255c <FPEC_DirectWriteByte+0x88>
	}
	else
	{
		writeStatus =  FPEC_CheckErrors();
 8002554:	f7ff ff40 	bl	80023d8 <FPEC_CheckErrors>
 8002558:	4603      	mov	r3, r0
 800255a:	73fb      	strb	r3, [r7, #15]
	}

	FPEC_LockFlash();
 800255c:	f7ff ff2e 	bl	80023bc <FPEC_LockFlash>

	return writeStatus;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40022000 	.word	0x40022000

08002570 <FPEC_InitFlash>:
  * @note   This function must be called once before any reading, writing or erasing.
  * @param  None.
  * @retval Flash error.
  */
void  FPEC_InitFlash(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
	RCC_EnablePeripheralClock(FLITF_PERIPHERAL);
 8002574:	2004      	movs	r0, #4
 8002576:	f000 fb5d 	bl	8002c34 <RCC_EnablePeripheralClock>
	FPEC_UnlockFlash();
 800257a:	f7ff ff0d 	bl	8002398 <FPEC_UnlockFlash>
#elif  SYSTEM_CLK  <=  48000000
	SET_BIT(FLASH->ACR, 0);
	CLR_BIT(FLASH->ACR, 1);
	CLR_BIT(FLASH->ACR, 2);
#elif  SYSTEM_CLK  <=  72000000
	CLR_BIT(FLASH->ACR, 0);
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <FPEC_InitFlash+0x3c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <FPEC_InitFlash+0x3c>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6013      	str	r3, [r2, #0]
	SET_BIT(FLASH->ACR, 1);
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <FPEC_InitFlash+0x3c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <FPEC_InitFlash+0x3c>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6013      	str	r3, [r2, #0]
	CLR_BIT(FLASH->ACR, 2);
 8002596:	4b05      	ldr	r3, [pc, #20]	; (80025ac <FPEC_InitFlash+0x3c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <FPEC_InitFlash+0x3c>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6013      	str	r3, [r2, #0]
#endif

	FPEC_LockFlash();
 80025a2:	f7ff ff0b 	bl	80023bc <FPEC_LockFlash>
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40022000 	.word	0x40022000

080025b0 <FPEC_ErasePage>:
  * @param  pageNumber: number of the page to be erased.
  * @note   There are 128 pages in the flash memory (from page 0 to page 127)
  * @retval Flash error
  */
FPEC_Error_t  FPEC_ErasePage(u8 pageNumber)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
	FPEC_Error_t  eraseStatus;

	FPEC_UnlockFlash();
 80025ba:	f7ff feed 	bl	8002398 <FPEC_UnlockFlash>

	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 80025be:	bf00      	nop
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <FPEC_ErasePage+0x90>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d0f9      	beq.n	80025c0 <FPEC_ErasePage+0x10>

	SET_BIT(FLASH->CR, 1);   //Set bit 1 to select page erase
 80025cc:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <FPEC_ErasePage+0x90>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	4a1b      	ldr	r2, [pc, #108]	; (8002640 <FPEC_ErasePage+0x90>)
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	6113      	str	r3, [r2, #16]

	/* Get address of first byte in the desired page to be erased */
	u32 pagePhysicalAddress = FLASH_BASE_ADDRESS + pageNumber * PAGE_SIZE_BYTES;
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	029b      	lsls	r3, r3, #10
 80025dc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80025e0:	60bb      	str	r3, [r7, #8]
	FLASH->AR = pagePhysicalAddress;
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <FPEC_ErasePage+0x90>)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	6153      	str	r3, [r2, #20]

	SET_BIT(FLASH->CR, 6);   //Start erasing the page
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <FPEC_ErasePage+0x90>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4a14      	ldr	r2, [pc, #80]	; (8002640 <FPEC_ErasePage+0x90>)
 80025ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f2:	6113      	str	r3, [r2, #16]

	/* wait until page erasing is completed */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 80025f4:	bf00      	nop
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <FPEC_ErasePage+0x90>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d0f9      	beq.n	80025f6 <FPEC_ErasePage+0x46>

	CLR_BIT(FLASH->CR, 1);   //Clear bit 1 to unselect page erase
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <FPEC_ErasePage+0x90>)
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <FPEC_ErasePage+0x90>)
 8002608:	f023 0302 	bic.w	r3, r3, #2
 800260c:	6113      	str	r3, [r2, #16]

	/* read first half word of this page to make sure it's erased successfully */
	if(FPEC_ReadHalfWord(pageNumber, 0) == 0xFFFF)
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f86e 	bl	80026f4 <FPEC_ReadHalfWord>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002620:	429a      	cmp	r2, r3
 8002622:	d102      	bne.n	800262a <FPEC_ErasePage+0x7a>
	{
		eraseStatus = FPEC_NO_ERRORS;
 8002624:	2302      	movs	r3, #2
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e003      	b.n	8002632 <FPEC_ErasePage+0x82>
	}
	else
	{
		eraseStatus = FPEC_CheckErrors();
 800262a:	f7ff fed5 	bl	80023d8 <FPEC_CheckErrors>
 800262e:	4603      	mov	r3, r0
 8002630:	73fb      	strb	r3, [r7, #15]
	}

	FPEC_LockFlash();
 8002632:	f7ff fec3 	bl	80023bc <FPEC_LockFlash>

	return eraseStatus;
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40022000 	.word	0x40022000

08002644 <FPEC_WritePage>:
  * @param  pageNumber: number of the page where you want to write.
  * @param  data: array that contains actual data you want to write.
  * @retval Flash error.
  */
FPEC_Error_t  FPEC_WritePage(u8 pageNumber, u16* data)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
	FPEC_Error_t writeStatus = FPEC_NO_ERRORS;
 8002650:	2302      	movs	r3, #2
 8002652:	73fb      	strb	r3, [r7, #15]

	FPEC_UnlockFlash();
 8002654:	f7ff fea0 	bl	8002398 <FPEC_UnlockFlash>

	/* To write on a page, it must be erased first */
	writeStatus = FPEC_ErasePage(pageNumber);
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff ffa8 	bl	80025b0 <FPEC_ErasePage>
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]

	/* Write the data on the page by half word at a time */
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	81bb      	strh	r3, [r7, #12]
 8002668:	e014      	b.n	8002694 <FPEC_WritePage+0x50>
	{
		u16 offsetAddress = i * HALF_WORD_SIZE;
 800266a:	89bb      	ldrh	r3, [r7, #12]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	817b      	strh	r3, [r7, #10]
		writeStatus = FPEC_DirectWriteHalfWord(pageNumber, offsetAddress, data[i]);
 8002670:	89bb      	ldrh	r3, [r7, #12]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	4413      	add	r3, r2
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	8979      	ldrh	r1, [r7, #10]
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fed2 	bl	8002428 <FPEC_DirectWriteHalfWord>
 8002684:	4603      	mov	r3, r0
 8002686:	73fb      	strb	r3, [r7, #15]

		/* If there were errors while writing, don't continue writing */
		if(writeStatus != FPEC_NO_ERRORS)		break;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <FPEC_WritePage+0x5a>
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 800268e:	89bb      	ldrh	r3, [r7, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	81bb      	strh	r3, [r7, #12]
 8002694:	89bb      	ldrh	r3, [r7, #12]
 8002696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269a:	d3e6      	bcc.n	800266a <FPEC_WritePage+0x26>
 800269c:	e000      	b.n	80026a0 <FPEC_WritePage+0x5c>
		if(writeStatus != FPEC_NO_ERRORS)		break;
 800269e:	bf00      	nop
	}

	FPEC_LockFlash();
 80026a0:	f7ff fe8c 	bl	80023bc <FPEC_LockFlash>

	return writeStatus;
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <FPEC_ReadPage>:
  * @param  pageNumber: number of the page you want to read.
  * @param  data: the function will fill this array with the data stored in the desired page.
  * @retval Flash error.
  */
void  FPEC_ReadPage(u8 pageNumber, u16* data)
{
 80026ae:	b590      	push	{r4, r7, lr}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	6039      	str	r1, [r7, #0]
 80026b8:	71fb      	strb	r3, [r7, #7]
	/* Read the whole page by reading half word at a time */
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 80026ba:	2300      	movs	r3, #0
 80026bc:	81fb      	strh	r3, [r7, #14]
 80026be:	e011      	b.n	80026e4 <FPEC_ReadPage+0x36>
	{
		u16 offsetAddress = i * HALF_WORD_SIZE;
 80026c0:	89fb      	ldrh	r3, [r7, #14]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	81bb      	strh	r3, [r7, #12]
		data[i] = FPEC_ReadHalfWord(pageNumber, offsetAddress);
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	18d4      	adds	r4, r2, r3
 80026ce:	89ba      	ldrh	r2, [r7, #12]
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 f80d 	bl	80026f4 <FPEC_ReadHalfWord>
 80026da:	4603      	mov	r3, r0
 80026dc:	8023      	strh	r3, [r4, #0]
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	3301      	adds	r3, #1
 80026e2:	81fb      	strh	r3, [r7, #14]
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ea:	d3e9      	bcc.n	80026c0 <FPEC_ReadPage+0x12>
	}
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}

080026f4 <FPEC_ReadHalfWord>:
  * @param  offsetAddress: offset address of the half word you want to read.
  * @param  data: the function will fill this array with the data stored in the desired page.
  * @retval data stored in the desired half word.
  */
u16  FPEC_ReadHalfWord(u8 pageNumber, u16 offsetAddress)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	460a      	mov	r2, r1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	4613      	mov	r3, r2
 8002702:	80bb      	strh	r3, [r7, #4]
	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8002704:	bf00      	nop
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <FPEC_ReadHalfWord+0x40>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b01      	cmp	r3, #1
 8002710:	d0f9      	beq.n	8002706 <FPEC_ReadHalfWord+0x12>

	/* Get physical address of the desired half word */
	volatile u16* physicalAddress = (volatile u16*)(FLASH_BASE_ADDRESS + pageNumber * PAGE_SIZE_BYTES + offsetAddress);
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	461a      	mov	r2, r3
 8002718:	88bb      	ldrh	r3, [r7, #4]
 800271a:	4413      	add	r3, r2
 800271c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002720:	60fb      	str	r3, [r7, #12]

	/* Read data from this physical address */
	return *physicalAddress;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40022000 	.word	0x40022000

08002738 <FPEC_ReadByte>:
  * @param  pageNumber: number of the page you want to read from.
  * @param  offsetAddress: offset address of the half word you want to read.
  * @retval data stored in the desired byte.
  */
u8  FPEC_ReadByte(u8 pageNumber, u16 offsetAddress)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	4613      	mov	r3, r2
 8002746:	80bb      	strh	r3, [r7, #4]
	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8002748:	bf00      	nop
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <FPEC_ReadByte+0x38>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d0f9      	beq.n	800274a <FPEC_ReadByte+0x12>

	return (u8)FPEC_ReadHalfWord(pageNumber, offsetAddress);
 8002756:	88ba      	ldrh	r2, [r7, #4]
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ffc9 	bl	80026f4 <FPEC_ReadHalfWord>
 8002762:	4603      	mov	r3, r0
 8002764:	b2db      	uxtb	r3, r3
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40022000 	.word	0x40022000

08002774 <FPEC_WriteByte>:
  * @param  offsetAddress: offset address of the half word you want to write.
  * @param  data: actual data you want to write.
  * @retval Flash error.
  */
FPEC_Error_t  FPEC_WriteByte(u8 pageNumber, u16 offsetAddress, u8 data)
{
 8002774:	b590      	push	{r4, r7, lr}
 8002776:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 800277a:	af00      	add	r7, sp, #0
 800277c:	4604      	mov	r4, r0
 800277e:	4608      	mov	r0, r1
 8002780:	4611      	mov	r1, r2
 8002782:	1dfb      	adds	r3, r7, #7
 8002784:	4622      	mov	r2, r4
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	4602      	mov	r2, r0
 800278c:	801a      	strh	r2, [r3, #0]
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	460a      	mov	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
	/* Read the content of the desired page */
	u16 pageData[PAGE_SIZE_HALF_WORDS];
	FPEC_ReadPage(pageNumber, pageData);
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	1dfb      	adds	r3, r7, #7
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff85 	bl	80026ae <FPEC_ReadPage>

	/* modify the desired byte */
	u16 originalhalfWord = pageData[offsetAddress/2];
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	461a      	mov	r2, r3
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027b6:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	if(offsetAddress % 2 == 0)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10e      	bne.n	80027e6 <FPEC_WriteByte+0x72>
	{
		originalhalfWord &= 0xFF00;
 80027c8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027d0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		originalhalfWord |= data;
 80027d4:	1dbb      	adds	r3, r7, #6
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 80027e4:	e00e      	b.n	8002804 <FPEC_WriteByte+0x90>
	}
	else
	{
		originalhalfWord &= 0x00FF;
 80027e6:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		originalhalfWord |= (((u16)data)<<8);
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	b21a      	sxth	r2, r3
 80027f8:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	; 0x40e
 80027fc:	4313      	orrs	r3, r2
 80027fe:	b21b      	sxth	r3, r3
 8002800:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	}
	pageData[offsetAddress/2] = originalhalfWord;
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	b29b      	uxth	r3, r3
 800280c:	4619      	mov	r1, r3
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8002816:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

	/* Erase page */
	FPEC_Error_t eraseStatus = FPEC_ErasePage(pageNumber);
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fec6 	bl	80025b0 <FPEC_ErasePage>
 8002824:	4603      	mov	r3, r0
 8002826:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
	if(eraseStatus != FPEC_NO_ERRORS)
 800282a:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 800282e:	2b02      	cmp	r3, #2
 8002830:	d002      	beq.n	8002838 <FPEC_WriteByte+0xc4>
	{
		return eraseStatus;
 8002832:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8002836:	e012      	b.n	800285e <FPEC_WriteByte+0xea>
	}

	/* Rewrite the page again after modifications */
	FPEC_Error_t writeStatus = FPEC_WritePage(pageNumber, pageData);
 8002838:	f107 020c 	add.w	r2, r7, #12
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fefe 	bl	8002644 <FPEC_WritePage>
 8002848:	4603      	mov	r3, r0
 800284a:	f887 340c 	strb.w	r3, [r7, #1036]	; 0x40c
	if(writeStatus != FPEC_NO_ERRORS)
 800284e:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8002852:	2b02      	cmp	r3, #2
 8002854:	d002      	beq.n	800285c <FPEC_WriteByte+0xe8>
	{
		return writeStatus;
 8002856:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 800285a:	e000      	b.n	800285e <FPEC_WriteByte+0xea>
	}

	return FPEC_NO_ERRORS;
 800285c:	2302      	movs	r3, #2
}
 800285e:	4618      	mov	r0, r3
 8002860:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}

08002868 <GPIO_InitPin>:




static void  GPIO_InitPin(GPIO_Pin_t* pin, const GPIO_PinConfg_t* pinConfg)
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	if(pin->pinNumber < 8)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	885b      	ldrh	r3, [r3, #2]
 8002876:	2b07      	cmp	r3, #7
 8002878:	d813      	bhi.n	80028a2 <GPIO_InitPin+0x3a>
	{
		GPIO[pin->port]->CRL = GPIO_GetNewValueOfCR(pin, pinConfg, GPIO[pin->port]->CRL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <GPIO_InitPin+0xd0>)
 8002882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <GPIO_InitPin+0xd0>)
 8002890:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8002894:	6839      	ldr	r1, [r7, #0]
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f850 	bl	800293c <GPIO_GetNewValueOfCR>
 800289c:	4603      	mov	r3, r0
 800289e:	6023      	str	r3, [r4, #0]
 80028a0:	e022      	b.n	80028e8 <GPIO_InitPin+0x80>
	}
	else if(pin->pinNumber < 16)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	885b      	ldrh	r3, [r3, #2]
 80028a6:	2b0f      	cmp	r3, #15
 80028a8:	d81e      	bhi.n	80028e8 <GPIO_InitPin+0x80>
	{
		pin->pinNumber -= 8;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	885b      	ldrh	r3, [r3, #2]
 80028ae:	3b08      	subs	r3, #8
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	805a      	strh	r2, [r3, #2]
		GPIO[pin->port]->CRH = GPIO_GetNewValueOfCR(pin, pinConfg, GPIO[pin->port]->CRH);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <GPIO_InitPin+0xd0>)
 80028be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4b1b      	ldr	r3, [pc, #108]	; (8002938 <GPIO_InitPin+0xd0>)
 80028cc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f832 	bl	800293c <GPIO_GetNewValueOfCR>
 80028d8:	4603      	mov	r3, r0
 80028da:	6063      	str	r3, [r4, #4]
		pin->pinNumber += 8;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	885b      	ldrh	r3, [r3, #2]
 80028e0:	3308      	adds	r3, #8
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	805a      	strh	r2, [r3, #2]
	}

	switch(pinConfg->pinMode)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d002      	beq.n	80028f6 <GPIO_InitPin+0x8e>
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d00e      	beq.n	8002912 <GPIO_InitPin+0xaa>
			break;
		case INPUT_PULL_DOWN:
			GPIO[pin->port]->BRR  = 1<<(pin->pinNumber);
			break;
		default:
			break;
 80028f4:	e01b      	b.n	800292e <GPIO_InitPin+0xc6>
			GPIO[pin->port]->BSRR = 1<<(pin->pinNumber);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	885b      	ldrh	r3, [r3, #2]
 80028fa:	461a      	mov	r2, r3
 80028fc:	2301      	movs	r3, #1
 80028fe:	fa03 f202 	lsl.w	r2, r3, r2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4619      	mov	r1, r3
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <GPIO_InitPin+0xd0>)
 800290a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800290e:	611a      	str	r2, [r3, #16]
			break;
 8002910:	e00d      	b.n	800292e <GPIO_InitPin+0xc6>
			GPIO[pin->port]->BRR  = 1<<(pin->pinNumber);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	885b      	ldrh	r3, [r3, #2]
 8002916:	461a      	mov	r2, r3
 8002918:	2301      	movs	r3, #1
 800291a:	fa03 f202 	lsl.w	r2, r3, r2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <GPIO_InitPin+0xd0>)
 8002926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800292a:	615a      	str	r2, [r3, #20]
			break;
 800292c:	bf00      	nop
	}
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bd90      	pop	{r4, r7, pc}
 8002936:	bf00      	nop
 8002938:	20000000 	.word	0x20000000

0800293c <GPIO_GetNewValueOfCR>:




static u32   GPIO_GetNewValueOfCR(GPIO_Pin_t* pin, const GPIO_PinConfg_t* pinConfg, u32 oldValueOfCR)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
	u32 CRValue = oldValueOfCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	617b      	str	r3, [r7, #20]

	/* Clear corresponding two MODE bits and two CNF bits */
	CRValue &= ~(0xFUL<<(4*(pin->pinNumber))) ;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	885b      	ldrh	r3, [r3, #2]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]


	switch (pinConfg->pinMode)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b07      	cmp	r3, #7
 8002966:	d833      	bhi.n	80029d0 <GPIO_GetNewValueOfCR+0x94>
 8002968:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <GPIO_GetNewValueOfCR+0x34>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	080029d1 	.word	0x080029d1
 8002974:	08002991 	.word	0x08002991
 8002978:	080029bb 	.word	0x080029bb
 800297c:	080029bb 	.word	0x080029bb
 8002980:	08002991 	.word	0x08002991
 8002984:	080029d1 	.word	0x080029d1
 8002988:	080029bb 	.word	0x080029bb
 800298c:	080029a7 	.word	0x080029a7
			/* Nothing to do here */
			break;

		case INPUT_FLOATING:
		case GENERAL_PURPOSE_OUTPUT_OPEN_DRAIN:
			SET_BIT(CRValue, 4*(pin->pinNumber)+2);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	885b      	ldrh	r3, [r3, #2]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	2201      	movs	r2, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
			break;
 80029a4:	e015      	b.n	80029d2 <GPIO_GetNewValueOfCR+0x96>

		case ALTERNATE_FUNCTION_OUTPUT_OPEN_DRAIN:
			SET_BIT(CRValue, 4*(pin->pinNumber)+2);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	885b      	ldrh	r3, [r3, #2]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	2201      	movs	r2, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	617b      	str	r3, [r7, #20]

		case INPUT_PULL_UP:
		case INPUT_PULL_DOWN:
		case ALTERNATE_FUNCTION_OUTPUT_PUSH_PULL:
			SET_BIT(CRValue, 4*(pin->pinNumber)+3);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	885b      	ldrh	r3, [r3, #2]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	3303      	adds	r3, #3
 80029c2:	2201      	movs	r2, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
			break;
 80029ce:	e000      	b.n	80029d2 <GPIO_GetNewValueOfCR+0x96>

		default:
			break;
 80029d0:	bf00      	nop
	}

	switch(pinConfg->pinMode)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	3b04      	subs	r3, #4
 80029d8:	2b03      	cmp	r3, #3
 80029da:	d827      	bhi.n	8002a2c <GPIO_GetNewValueOfCR+0xf0>
	{
		case GENERAL_PURPOSE_OUTPUT_OPEN_DRAIN ... ALTERNATE_FUNCTION_OUTPUT_OPEN_DRAIN:
			switch (pinConfg->outputSpeed)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	785b      	ldrb	r3, [r3, #1]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d017      	beq.n	8002a14 <GPIO_GetNewValueOfCR+0xd8>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d00c      	beq.n	8002a02 <GPIO_GetNewValueOfCR+0xc6>
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d000      	beq.n	80029ee <GPIO_GetNewValueOfCR+0xb2>
				case OUTPUT_SPEED_2MHz:
					SET_BIT(CRValue, 4*(pin->pinNumber)+1);
					break;

				default:
					break;
 80029ec:	e01d      	b.n	8002a2a <GPIO_GetNewValueOfCR+0xee>
					SET_BIT(CRValue, 4*(pin->pinNumber));
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	885b      	ldrh	r3, [r3, #2]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	2201      	movs	r2, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
					break;
 8002a00:	e013      	b.n	8002a2a <GPIO_GetNewValueOfCR+0xee>
					SET_BIT(CRValue, 4*(pin->pinNumber));
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	885b      	ldrh	r3, [r3, #2]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	2201      	movs	r2, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
					SET_BIT(CRValue, 4*(pin->pinNumber)+1);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	885b      	ldrh	r3, [r3, #2]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]
					break;
 8002a28:	bf00      	nop
			}
			break;
 8002a2a:	e000      	b.n	8002a2e <GPIO_GetNewValueOfCR+0xf2>

		default:
			break;
 8002a2c:	bf00      	nop
	}

	return CRValue;
 8002a2e:	697b      	ldr	r3, [r7, #20]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <GPIO_InitPins>:




void  GPIO_InitPins(const GPIO_Pin_t* groupOfPins, const GPIO_PinConfg_t* pinConfg)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
	GPIO_Pin_t pin;
	pin.port = groupOfPins->port;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	723b      	strb	r3, [r7, #8]

	switch(pin.port)
 8002a4c:	7a3b      	ldrb	r3, [r7, #8]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d007      	beq.n	8002a62 <GPIO_InitPins+0x26>
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d009      	beq.n	8002a6a <GPIO_InitPins+0x2e>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10b      	bne.n	8002a72 <GPIO_InitPins+0x36>
	{
		case GPIO_PORTA:
			RCC_EnablePeripheralClock(GPIOA_PERIPHERAL);
 8002a5a:	2042      	movs	r0, #66	; 0x42
 8002a5c:	f000 f8ea 	bl	8002c34 <RCC_EnablePeripheralClock>
			break;
 8002a60:	e007      	b.n	8002a72 <GPIO_InitPins+0x36>

		case GPIO_PORTB:
			RCC_EnablePeripheralClock(GPIOB_PERIPHERAL);
 8002a62:	2043      	movs	r0, #67	; 0x43
 8002a64:	f000 f8e6 	bl	8002c34 <RCC_EnablePeripheralClock>
			break;
 8002a68:	e003      	b.n	8002a72 <GPIO_InitPins+0x36>

		case GPIO_PORTC:
			RCC_EnablePeripheralClock(GPIOC_PERIPHERAL);
 8002a6a:	2044      	movs	r0, #68	; 0x44
 8002a6c:	f000 f8e2 	bl	8002c34 <RCC_EnablePeripheralClock>
			break;
 8002a70:	bf00      	nop
	}


	for(u8 pinNumCounter = 0; pinNumCounter < 16; pinNumCounter++)
 8002a72:	2300      	movs	r3, #0
 8002a74:	73fb      	strb	r3, [r7, #15]
 8002a76:	e015      	b.n	8002aa4 <GPIO_InitPins+0x68>
	{
		if(GET_BIT(groupOfPins->pinNumber, pinNumCounter) == 0)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	885b      	ldrh	r3, [r3, #2]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	fa42 f303 	asr.w	r3, r2, r3
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <GPIO_InitPins+0x62>
		{
			pin.pinNumber = pinNumCounter;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	817b      	strh	r3, [r7, #10]
			GPIO_InitPin(&pin, pinConfg);
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fee5 	bl	8002868 <GPIO_InitPin>
	for(u8 pinNumCounter = 0; pinNumCounter < 16; pinNumCounter++)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	d9e6      	bls.n	8002a78 <GPIO_InitPins+0x3c>
		}
	}
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <NVIC_EnableInterrupt>:

#include  "NVIC.h"


void  NVIC_EnableInterrupt(IRQn_Type IRQnID)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	71fb      	strb	r3, [r7, #7]
	if(IRQnID >= 0)   //if IRQnID is an ID of Peripheral Interrupt not system exception
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	db0d      	blt.n	8002ae2 <NVIC_EnableInterrupt+0x2e>
	{
		NVIC->ISER[IRQnID>>5] = 1<<(IRQnID & 0x1F);
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	2201      	movs	r2, #1
 8002ace:	fa02 f103 	lsl.w	r1, r2, r3
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <NVIC_EnableInterrupt+0x6c>)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	115b      	asrs	r3, r3, #5
 8002ada:	b25b      	sxtb	r3, r3
 8002adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else if(IRQnID == MemoryManagement_IRQn || IRQnID == BusFault_IRQn || IRQnID == UsageFault_IRQn)
	{
		SET_BIT(SCB->SHCSR, IRQnID + 28);
	}
}
 8002ae0:	e019      	b.n	8002b16 <NVIC_EnableInterrupt+0x62>
	else if(IRQnID == MemoryManagement_IRQn || IRQnID == BusFault_IRQn || IRQnID == UsageFault_IRQn)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	f113 0f0c 	cmn.w	r3, #12
 8002aea:	d009      	beq.n	8002b00 <NVIC_EnableInterrupt+0x4c>
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	f113 0f0b 	cmn.w	r3, #11
 8002af4:	d004      	beq.n	8002b00 <NVIC_EnableInterrupt+0x4c>
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	f113 0f0a 	cmn.w	r3, #10
 8002afe:	d10a      	bne.n	8002b16 <NVIC_EnableInterrupt+0x62>
		SET_BIT(SCB->SHCSR, IRQnID + 28);
 8002b00:	4b08      	ldr	r3, [pc, #32]	; (8002b24 <NVIC_EnableInterrupt+0x70>)
 8002b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	331c      	adds	r3, #28
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	4904      	ldr	r1, [pc, #16]	; (8002b24 <NVIC_EnableInterrupt+0x70>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_ResetSystem>:




void  NVIC_ResetSystem(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
	SCB->AIRCR = 0x05FA0004;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <NVIC_ResetSystem+0x14>)
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <NVIC_ResetSystem+0x18>)
 8002b30:	60da      	str	r2, [r3, #12]
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed00 	.word	0xe000ed00
 8002b40:	05fa0004 	.word	0x05fa0004

08002b44 <NVIC_MaskIRQs>:
	}
}


void  NVIC_MaskIRQs(u8 thresholdPriority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
	__set_BASEPRI(thresholdPriority);
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	2301      	movs	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(1);
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <NVIC_UnMaskIRQs>:

void  NVIC_UnMaskIRQs(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(0);
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr
	...

08002b88 <RCC_InitClock>:
#include "RCC.h"

void  RCC_InitClock(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	RCC->CR = 0x1;   //enable HSI
 8002b8c:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <RCC_InitClock+0xa8>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
	RCC->CFGR = 0;   //select HSI as system clock
 8002b92:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <RCC_InitClock+0xa8>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	605a      	str	r2, [r3, #4]
	RCC->CIR  = 0x9F0000;   //disable all RCC interrupts , clear all flags
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <RCC_InitClock+0xa8>)
 8002b9a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002b9e:	609a      	str	r2, [r3, #8]
	
	RCC_EnablePeripheralClock(FLITF_PERIPHERAL);
 8002ba0:	2004      	movs	r0, #4
 8002ba2:	f000 f847 	bl	8002c34 <RCC_EnablePeripheralClock>
	FPEC_InitFlash();
 8002ba6:	f7ff fce3 	bl	8002570 <FPEC_InitFlash>
	
	
	#if  APB1_DIVISION_FACTOR == 1
		/* do nothing, AHB division factor is already 1 */
	#elif  APB1_DIVISION_FACTOR == 2
		RCC->CFGR |= 0x400;
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb4:	6053      	str	r3, [r2, #4]
	#endif
	
	

	#if  CLK_SECURITY_SYSTEM_STATE == ENABLED
		SET_BIT(RCC->CR, 19);
 8002bb6:	4b1e      	ldr	r3, [pc, #120]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1d      	ldr	r2, [pc, #116]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bc0:	6013      	str	r3, [r2, #0]
	#if  HSE_STATE == ENABLED
		#if  HSE_SRC == HSE_RC
			SET_BIT(RCC->CR, 18);  //select RC as HSE
		#endif
		
		SET_BIT(RCC->CR, 16);   //enable HSE
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->CR, 17) == 0);   //wait until HSE is ready
 8002bce:	bf00      	nop
 8002bd0:	4b17      	ldr	r3, [pc, #92]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0c5b      	lsrs	r3, r3, #17
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f8      	beq.n	8002bd0 <RCC_InitClock+0x48>
	
	
	
	#if  PLL_STATE == ENABLED
		#if  PLL_SRC == HSE
			SET_BIT(RCC->CFGR, 16);   //select HSE as PLL input clock 
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <RCC_InitClock+0xa8>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <RCC_InitClock+0xa8>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR, 16);   //select HSE/2 as PLL input clock 
		#elif  PLL_SRC == HSI_DIVIDED_BY_2
			/* do nothing, HSI/2 is already selected as PLL input clock */
		#endif
		
		RCC->CFGR |= ((PLL_FACTOR-2)<<18);   //select PLL multiplication factor
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4a10      	ldr	r2, [pc, #64]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bf0:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002bf4:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CR, 24);                //enable PLL
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a0d      	ldr	r2, [pc, #52]	; (8002c30 <RCC_InitClock+0xa8>)
 8002bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c00:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->CR, 25) == 0);    //wait until PLL is ready
 8002c02:	bf00      	nop
 8002c04:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <RCC_InitClock+0xa8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e5b      	lsrs	r3, r3, #25
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f8      	beq.n	8002c04 <RCC_InitClock+0x7c>
		
		#if  CLK_TYPE == PLL
			SET_BIT(RCC->CFGR, 1);   //select PLL as system clock
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <RCC_InitClock+0xa8>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <RCC_InitClock+0xa8>)
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	6053      	str	r3, [r2, #4]
			while( (RCC->CFGR & 0xC) != 0x8);   //wait until PLL is used as system clock
 8002c1e:	bf00      	nop
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <RCC_InitClock+0xa8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d1f9      	bne.n	8002c20 <RCC_InitClock+0x98>
	
	#if  HSI_STATE == DISABLED
		CLR_BIT(RCC->CR, 0);
	#endif
	
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000

08002c34 <RCC_EnablePeripheralClock>:


void  RCC_EnablePeripheralClock (uint8_t peripheral)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
	if(peripheral < 32)    //if peripheral is connected to AHB
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b1f      	cmp	r3, #31
 8002c42:	d809      	bhi.n	8002c58 <RCC_EnablePeripheralClock+0x24>
	{
		SET_BIT(RCC->AHBENR, peripheral);
 8002c44:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <RCC_EnablePeripheralClock+0x64>)
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	4911      	ldr	r1, [pc, #68]	; (8002c98 <RCC_EnablePeripheralClock+0x64>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	614b      	str	r3, [r1, #20]
	}
	else if(peripheral < 96)    //if peripheral is connected to APB2
	{
		SET_BIT(RCC->APB2ENR, peripheral-64);
	}
}
 8002c56:	e01a      	b.n	8002c8e <RCC_EnablePeripheralClock+0x5a>
	else if(peripheral < 64)    //if peripheral is connected to APB1
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	2b3f      	cmp	r3, #63	; 0x3f
 8002c5c:	d80a      	bhi.n	8002c74 <RCC_EnablePeripheralClock+0x40>
		SET_BIT(RCC->APB1ENR, peripheral-32);
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <RCC_EnablePeripheralClock+0x64>)
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	3b20      	subs	r3, #32
 8002c66:	2101      	movs	r1, #1
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	490a      	ldr	r1, [pc, #40]	; (8002c98 <RCC_EnablePeripheralClock+0x64>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61cb      	str	r3, [r1, #28]
}
 8002c72:	e00c      	b.n	8002c8e <RCC_EnablePeripheralClock+0x5a>
	else if(peripheral < 96)    //if peripheral is connected to APB2
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b5f      	cmp	r3, #95	; 0x5f
 8002c78:	d809      	bhi.n	8002c8e <RCC_EnablePeripheralClock+0x5a>
		SET_BIT(RCC->APB2ENR, peripheral-64);
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <RCC_EnablePeripheralClock+0x64>)
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	3b40      	subs	r3, #64	; 0x40
 8002c82:	2101      	movs	r1, #1
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	4903      	ldr	r1, [pc, #12]	; (8002c98 <RCC_EnablePeripheralClock+0x64>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	618b      	str	r3, [r1, #24]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	40021000 	.word	0x40021000

08002c9c <main>:

void jumpToApp(void);


int main(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
	RCC_InitClock();
 8002ca2:	f7ff ff71 	bl	8002b88 <RCC_InitClock>
	updatesInit();
 8002ca6:	f000 f8b3 	bl	8002e10 <updatesInit>
	NVIC_UnMaskIRQs();
 8002caa:	f7ff ff5f 	bl	8002b6c <NVIC_UnMaskIRQs>

	ImgType_t  imgType;
	Boolean_t  state = updateImg(&imgType);
 8002cae:	1dbb      	adds	r3, r7, #6
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f8d1 	bl	8002e58 <updateImg>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
	if(state == TRUE)
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d11f      	bne.n	8002d00 <main+0x64>
	{
		switch(imgType)
 8002cc0:	79bb      	ldrb	r3, [r7, #6]
 8002cc2:	2b41      	cmp	r3, #65	; 0x41
 8002cc4:	d002      	beq.n	8002ccc <main+0x30>
 8002cc6:	2b42      	cmp	r3, #66	; 0x42
 8002cc8:	d00c      	beq.n	8002ce4 <main+0x48>
 8002cca:	e017      	b.n	8002cfc <main+0x60>
		{
			case APP:
				if (ecuConfig.activeAppRegion == 1)
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <main+0x6c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d103      	bne.n	8002cdc <main+0x40>
					ecuConfig.activeAppRegion = 2;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <main+0x6c>)
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	701a      	strb	r2, [r3, #0]
				else
					ecuConfig.activeAppRegion = 1;
			break;
 8002cda:	e00f      	b.n	8002cfc <main+0x60>
					ecuConfig.activeAppRegion = 1;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <main+0x6c>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
			break;
 8002ce2:	e00b      	b.n	8002cfc <main+0x60>

			case BOOTLOADER:
				if (ecuConfig.activeBootRegion == 1)
 8002ce4:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <main+0x6c>)
 8002ce6:	785b      	ldrb	r3, [r3, #1]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d103      	bne.n	8002cf4 <main+0x58>
					ecuConfig.activeBootRegion = 2;
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <main+0x6c>)
 8002cee:	2202      	movs	r2, #2
 8002cf0:	705a      	strb	r2, [r3, #1]
				else
					ecuConfig.activeBootRegion = 1;
			break;
 8002cf2:	e002      	b.n	8002cfa <main+0x5e>
					ecuConfig.activeBootRegion = 1;
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <main+0x6c>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	705a      	strb	r2, [r3, #1]
			break;
 8002cfa:	bf00      	nop
		}

		ECU_UpdateConfig();
 8002cfc:	f7ff fb2e 	bl	800235c <ECU_UpdateConfig>
	}

	jumpToApp();
 8002d00:	f000 f804 	bl	8002d0c <jumpToApp>

	while (1)
 8002d04:	e7fe      	b.n	8002d04 <main+0x68>
 8002d06:	bf00      	nop
 8002d08:	20000044 	.word	0x20000044

08002d0c <jumpToApp>:
	return 0;
}


void jumpToApp(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	ECU_ConfigActivateApp();
 8002d10:	f7ff fb38 	bl	8002384 <ECU_ConfigActivateApp>
	NVIC_MaskIRQs(0);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7ff ff15 	bl	8002b44 <NVIC_MaskIRQs>
	NVIC_ResetSystem();
 8002d1a:	f7ff ff05 	bl	8002b28 <NVIC_ResetSystem>
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d26:	e7fe      	b.n	8002d26 <NMI_Handler+0x4>

08002d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <HardFault_Handler+0x4>

08002d2e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <MemManage_Handler+0x4>

08002d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <BusFault_Handler+0x4>

08002d3a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <UsageFault_Handler+0x4>

08002d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d44:	bf00      	nop
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d68:	f000 f972 	bl	8003050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <CAN_CallBackFun>:
static CAN_Frame_t rxFrame;
static Boolean_t   newRxFrame = FALSE;


static void CAN_CallBackFun(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
	CAN_Rx(&rxFrame, 0);
 8002d80:	2100      	movs	r1, #0
 8002d82:	4804      	ldr	r0, [pc, #16]	; (8002d94 <CAN_CallBackFun+0x18>)
 8002d84:	f7ff fa2c 	bl	80021e0 <CAN_Rx>
	newRxFrame = TRUE;
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <CAN_CallBackFun+0x1c>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000030 	.word	0x20000030
 8002d98:	20000040 	.word	0x20000040

08002d9c <validateRes>:


static Boolean_t  validateRes(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
	u32 timeut = 0xFFFFFFF;
 8002da2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002da6:	607b      	str	r3, [r7, #4]
	while(newRxFrame == FALSE && timeut)
 8002da8:	e002      	b.n	8002db0 <validateRes+0x14>
		timeut--;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	607b      	str	r3, [r7, #4]
	while(newRxFrame == FALSE && timeut)
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <validateRes+0x6c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <validateRes+0x22>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f5      	bne.n	8002daa <validateRes+0xe>

	if(newRxFrame == FALSE)
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <validateRes+0x6c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <validateRes+0x2e>
		return FALSE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e019      	b.n	8002dfe <validateRes+0x62>

	newRxFrame = FALSE;
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <validateRes+0x6c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]

	if(rxFrame.idType != STANDARD_ID)
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <validateRes+0x70>)
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <validateRes+0x40>
		return FALSE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e010      	b.n	8002dfe <validateRes+0x62>

	if(rxFrame.id != ECU_UPDATE_CONTROL_ID && rxFrame.id != ECU_UPDATE_PAYLOAD_ID)
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <validateRes+0x70>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b51      	cmp	r3, #81	; 0x51
 8002de2:	d005      	beq.n	8002df0 <validateRes+0x54>
 8002de4:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <validateRes+0x70>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b50      	cmp	r3, #80	; 0x50
 8002dea:	d001      	beq.n	8002df0 <validateRes+0x54>
		return FALSE;
 8002dec:	2300      	movs	r3, #0
 8002dee:	e006      	b.n	8002dfe <validateRes+0x62>

	if(rxFrame.frameType != DATA_FRAME)
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <validateRes+0x70>)
 8002df2:	795b      	ldrb	r3, [r3, #5]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <validateRes+0x60>
		return FALSE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e000      	b.n	8002dfe <validateRes+0x62>

	return TRUE;
 8002dfc:	2301      	movs	r3, #1
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000040 	.word	0x20000040
 8002e0c:	20000030 	.word	0x20000030

08002e10 <updatesInit>:


void  updatesInit(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08e      	sub	sp, #56	; 0x38
 8002e14:	af00      	add	r7, sp, #0
	RCC_EnablePeripheralClock(CAN_PERIPHERAL);
 8002e16:	2039      	movs	r0, #57	; 0x39
 8002e18:	f7ff ff0c 	bl	8002c34 <RCC_EnablePeripheralClock>
	CAN_Init(CAN_CallBackFun);
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <updatesInit+0x44>)
 8002e1e:	f7fe fda3 	bl	8001968 <CAN_Init>

	/* config filters */
	CAN_RxFilterBankConfig_t filterConfig = {
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2234      	movs	r2, #52	; 0x34
 8002e26:	2100      	movs	r1, #0
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 f947 	bl	80030bc <memset>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	713b      	strb	r3, [r7, #4]
 8002e32:	2350      	movs	r3, #80	; 0x50
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	2351      	movs	r3, #81	; 0x51
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	2351      	movs	r3, #81	; 0x51
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	2351      	movs	r3, #81	; 0x51
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
				.frameType        =  DATA_FRAME
			}
		}
	};

	CAN_InitFilterBank(&filterConfig);
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fe61 	bl	8001b0c <CAN_InitFilterBank>
}
 8002e4a:	bf00      	nop
 8002e4c:	3738      	adds	r7, #56	; 0x38
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08002d7d 	.word	0x08002d7d

08002e58 <updateImg>:


Boolean_t  updateImg(ImgType_t*  imgType)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	CAN_Frame_t txFrame = {
 8002e60:	f107 0308 	add.w	r3, r7, #8
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	2351      	movs	r3, #81	; 0x51
 8002e70:	60bb      	str	r3, [r7, #8]
 8002e72:	2301      	movs	r3, #1
 8002e74:	73bb      	strb	r3, [r7, #14]
 8002e76:	2341      	movs	r3, #65	; 0x41
 8002e78:	73fb      	strb	r3, [r7, #15]
		.frameType        =    DATA_FRAME,
		.idType           =    STANDARD_ID,
		.data             =    {ECU_ACK}
	};

	CAN_Tx(&txFrame);
 8002e7a:	f107 0308 	add.w	r3, r7, #8
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f8b6 	bl	8001ff0 <CAN_Tx>

	Boolean_t res  =  validateRes();
 8002e84:	f7ff ff8a 	bl	8002d9c <validateRes>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	77bb      	strb	r3, [r7, #30]
	if(res == FALSE)
 8002e8c:	7fbb      	ldrb	r3, [r7, #30]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <updateImg+0x3e>
		return FALSE;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e0af      	b.n	8002ff6 <updateImg+0x19e>

	if(rxFrame.DLC != 1)
 8002e96:	4b5a      	ldr	r3, [pc, #360]	; (8003000 <updateImg+0x1a8>)
 8002e98:	799b      	ldrb	r3, [r3, #6]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d001      	beq.n	8002ea2 <updateImg+0x4a>
		return FALSE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e0a9      	b.n	8002ff6 <updateImg+0x19e>

	*imgType = rxFrame.data[0];
 8002ea2:	4b57      	ldr	r3, [pc, #348]	; (8003000 <updateImg+0x1a8>)
 8002ea4:	79da      	ldrb	r2, [r3, #7]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	701a      	strb	r2, [r3, #0]
	if((*imgType) != APP && (*imgType) != BOOTLOADER)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b41      	cmp	r3, #65	; 0x41
 8002eb0:	d005      	beq.n	8002ebe <updateImg+0x66>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b42      	cmp	r3, #66	; 0x42
 8002eb8:	d001      	beq.n	8002ebe <updateImg+0x66>
		return FALSE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e09b      	b.n	8002ff6 <updateImg+0x19e>


	Boolean_t  isFileEnded = FALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	777b      	strb	r3, [r7, #29]
	while(isFileEnded == FALSE)
 8002ec2:	e093      	b.n	8002fec <updateImg+0x194>
	{
		CAN_Tx(&txFrame);
 8002ec4:	f107 0308 	add.w	r3, r7, #8
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff f891 	bl	8001ff0 <CAN_Tx>
		res  =  validateRes();
 8002ece:	f7ff ff65 	bl	8002d9c <validateRes>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	77bb      	strb	r3, [r7, #30]
		if(res == FALSE)
 8002ed6:	7fbb      	ldrb	r3, [r7, #30]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d108      	bne.n	8002eee <updateImg+0x96>
		{
			txFrame.data[0] = ECU_NAK;
 8002edc:	234e      	movs	r3, #78	; 0x4e
 8002ede:	73fb      	strb	r3, [r7, #15]
			CAN_Tx(&txFrame);
 8002ee0:	f107 0308 	add.w	r3, r7, #8
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff f883 	bl	8001ff0 <CAN_Tx>
			return FALSE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e083      	b.n	8002ff6 <updateImg+0x19e>
		}

		if(rxFrame.id == ECU_UPDATE_CONTROL_ID && (rxFrame.data[0] == FALSE || rxFrame.data[0] == TRUE))
 8002eee:	4b44      	ldr	r3, [pc, #272]	; (8003000 <updateImg+0x1a8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b51      	cmp	r3, #81	; 0x51
 8002ef4:	d10a      	bne.n	8002f0c <updateImg+0xb4>
 8002ef6:	4b42      	ldr	r3, [pc, #264]	; (8003000 <updateImg+0x1a8>)
 8002ef8:	79db      	ldrb	r3, [r3, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <updateImg+0xae>
 8002efe:	4b40      	ldr	r3, [pc, #256]	; (8003000 <updateImg+0x1a8>)
 8002f00:	79db      	ldrb	r3, [r3, #7]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <updateImg+0xb4>
		{
			return rxFrame.data[0];
 8002f06:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <updateImg+0x1a8>)
 8002f08:	79db      	ldrb	r3, [r3, #7]
 8002f0a:	e074      	b.n	8002ff6 <updateImg+0x19e>
		}

		if(rxFrame.DLC <= 4)
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <updateImg+0x1a8>)
 8002f0e:	799b      	ldrb	r3, [r3, #6]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d808      	bhi.n	8002f26 <updateImg+0xce>
		{
			txFrame.data[0] = ECU_NAK;
 8002f14:	234e      	movs	r3, #78	; 0x4e
 8002f16:	73fb      	strb	r3, [r7, #15]
			CAN_Tx(&txFrame);
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff f867 	bl	8001ff0 <CAN_Tx>
			return FALSE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e067      	b.n	8002ff6 <updateImg+0x19e>
		}


		u32 address = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
		for(u8 i = 0; i < 4; i++)
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f30:	e012      	b.n	8002f58 <updateImg+0x100>
		{
			address |= ((u32) rxFrame.data[i]) << (i<<3);
 8002f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f36:	4a32      	ldr	r2, [pc, #200]	; (8003000 <updateImg+0x1a8>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	79db      	ldrb	r3, [r3, #7]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
		for(u8 i = 0; i < 4; i++)
 8002f4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f52:	3301      	adds	r3, #1
 8002f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d9e8      	bls.n	8002f32 <updateImg+0xda>
		}


		u16 startByteOffset  =  (address - FLASH_BASE_ADDRESS) & 0x3FF;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f68:	843b      	strh	r3, [r7, #32]
		u16 startBytePageNum =  (address - FLASH_BASE_ADDRESS) >> 10;
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8002f70:	0a9b      	lsrs	r3, r3, #10
 8002f72:	837b      	strh	r3, [r7, #26]

		FPEC_Error_t  flashState;

		if(startByteOffset == 0)
 8002f74:	8c3b      	ldrh	r3, [r7, #32]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d112      	bne.n	8002fa0 <updateImg+0x148>
		{
			flashState = FPEC_ErasePage(startBytePageNum);
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fb16 	bl	80025b0 <FPEC_ErasePage>
 8002f84:	4603      	mov	r3, r0
 8002f86:	767b      	strb	r3, [r7, #25]

			if(flashState != FPEC_NO_ERRORS)
 8002f88:	7e7b      	ldrb	r3, [r7, #25]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d008      	beq.n	8002fa0 <updateImg+0x148>
			{
				txFrame.data[0] = ECU_NAK;
 8002f8e:	234e      	movs	r3, #78	; 0x4e
 8002f90:	73fb      	strb	r3, [r7, #15]
				CAN_Tx(&txFrame);
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff f82a 	bl	8001ff0 <CAN_Tx>
				return FALSE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e02a      	b.n	8002ff6 <updateImg+0x19e>
			}
		}


		for(u8 i = 4; i < rxFrame.DLC; i++)
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e01d      	b.n	8002fe2 <updateImg+0x18a>
		{
			flashState = FPEC_DirectWriteByte(startBytePageNum, startByteOffset, rxFrame.data[i]);
 8002fa6:	8b7b      	ldrh	r3, [r7, #26]
 8002fa8:	b2d8      	uxtb	r0, r3
 8002faa:	7ffb      	ldrb	r3, [r7, #31]
 8002fac:	4a14      	ldr	r2, [pc, #80]	; (8003000 <updateImg+0x1a8>)
 8002fae:	4413      	add	r3, r2
 8002fb0:	79da      	ldrb	r2, [r3, #7]
 8002fb2:	8c3b      	ldrh	r3, [r7, #32]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	f7ff fa8d 	bl	80024d4 <FPEC_DirectWriteByte>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	767b      	strb	r3, [r7, #25]
			startByteOffset++;
 8002fbe:	8c3b      	ldrh	r3, [r7, #32]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	843b      	strh	r3, [r7, #32]
			if(flashState != FPEC_NO_ERRORS)
 8002fc4:	7e7b      	ldrb	r3, [r7, #25]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d008      	beq.n	8002fdc <updateImg+0x184>
			{
				txFrame.data[0] = ECU_NAK;
 8002fca:	234e      	movs	r3, #78	; 0x4e
 8002fcc:	73fb      	strb	r3, [r7, #15]
				CAN_Tx(&txFrame);
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f80c 	bl	8001ff0 <CAN_Tx>
				return FALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	e00c      	b.n	8002ff6 <updateImg+0x19e>
		for(u8 i = 4; i < rxFrame.DLC; i++)
 8002fdc:	7ffb      	ldrb	r3, [r7, #31]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	77fb      	strb	r3, [r7, #31]
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <updateImg+0x1a8>)
 8002fe4:	799b      	ldrb	r3, [r3, #6]
 8002fe6:	7ffa      	ldrb	r2, [r7, #31]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3dc      	bcc.n	8002fa6 <updateImg+0x14e>
	while(isFileEnded == FALSE)
 8002fec:	7f7b      	ldrb	r3, [r7, #29]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f43f af68 	beq.w	8002ec4 <updateImg+0x6c>
			}
		}
	}


	return TRUE;
 8002ff4:	2301      	movs	r3, #1
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3728      	adds	r7, #40	; 0x28
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000030 	.word	0x20000030

08003004 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003004:	480c      	ldr	r0, [pc, #48]	; (8003038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003006:	490d      	ldr	r1, [pc, #52]	; (800303c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003008:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800300c:	e002      	b.n	8003014 <LoopCopyDataInit>

0800300e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800300e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003012:	3304      	adds	r3, #4

08003014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003018:	d3f9      	bcc.n	800300e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800301a:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800301c:	4c0a      	ldr	r4, [pc, #40]	; (8003048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800301e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003020:	e001      	b.n	8003026 <LoopFillZerobss>

08003022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003024:	3204      	adds	r2, #4

08003026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003028:	d3fb      	bcc.n	8003022 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800302a:	f7ff fea1 	bl	8002d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800302e:	f000 f821 	bl	8003074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003032:	f7ff fe33 	bl	8002c9c <main>
  bx lr
 8003036:	4770      	bx	lr
  ldr r0, =_sdata
 8003038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800303c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003040:	080030fc 	.word	0x080030fc
  ldr r2, =_sbss
 8003044:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003048:	2000004c 	.word	0x2000004c

0800304c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800304c:	e7fe      	b.n	800304c <ADC1_2_IRQHandler>
	...

08003050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_IncTick+0x1c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_IncTick+0x20>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4413      	add	r3, r2
 8003060:	4a03      	ldr	r2, [pc, #12]	; (8003070 <HAL_IncTick+0x20>)
 8003062:	6013      	str	r3, [r2, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	2000000c 	.word	0x2000000c
 8003070:	20000048 	.word	0x20000048

08003074 <__libc_init_array>:
 8003074:	b570      	push	{r4, r5, r6, lr}
 8003076:	2500      	movs	r5, #0
 8003078:	4e0c      	ldr	r6, [pc, #48]	; (80030ac <__libc_init_array+0x38>)
 800307a:	4c0d      	ldr	r4, [pc, #52]	; (80030b0 <__libc_init_array+0x3c>)
 800307c:	1ba4      	subs	r4, r4, r6
 800307e:	10a4      	asrs	r4, r4, #2
 8003080:	42a5      	cmp	r5, r4
 8003082:	d109      	bne.n	8003098 <__libc_init_array+0x24>
 8003084:	f000 f822 	bl	80030cc <_init>
 8003088:	2500      	movs	r5, #0
 800308a:	4e0a      	ldr	r6, [pc, #40]	; (80030b4 <__libc_init_array+0x40>)
 800308c:	4c0a      	ldr	r4, [pc, #40]	; (80030b8 <__libc_init_array+0x44>)
 800308e:	1ba4      	subs	r4, r4, r6
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	42a5      	cmp	r5, r4
 8003094:	d105      	bne.n	80030a2 <__libc_init_array+0x2e>
 8003096:	bd70      	pop	{r4, r5, r6, pc}
 8003098:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800309c:	4798      	blx	r3
 800309e:	3501      	adds	r5, #1
 80030a0:	e7ee      	b.n	8003080 <__libc_init_array+0xc>
 80030a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a6:	4798      	blx	r3
 80030a8:	3501      	adds	r5, #1
 80030aa:	e7f2      	b.n	8003092 <__libc_init_array+0x1e>
 80030ac:	080030f4 	.word	0x080030f4
 80030b0:	080030f4 	.word	0x080030f4
 80030b4:	080030f4 	.word	0x080030f4
 80030b8:	080030f8 	.word	0x080030f8

080030bc <memset>:
 80030bc:	4603      	mov	r3, r0
 80030be:	4402      	add	r2, r0
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memset+0xa>
 80030c4:	4770      	bx	lr
 80030c6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ca:	e7f9      	b.n	80030c0 <memset+0x4>

080030cc <_init>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr

080030d8 <_fini>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	bf00      	nop
 80030dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030de:	bc08      	pop	{r3}
 80030e0:	469e      	mov	lr, r3
 80030e2:	4770      	bx	lr
