
APP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08007000  08007000  00007000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001608  0800710c  0800710c  0000710c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08008714  08008714  00008714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008728  08008728  00010010  2**0
                  CONTENTS
  4 .ARM          00000000  08008728  08008728  00010010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008728  08008728  00010010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008728  08008728  00008728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800872c  0800872c  0000872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008730  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000010  08008740  00010010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08008740  0001003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000035d8  00000000  00000000  00010039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000101a  00000000  00000000  00013611  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003e8  00000000  00000000  00014630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000348  00000000  00000000  00014a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010e3d  00000000  00000000  00014d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004160  00000000  00000000  00025b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c9ff  00000000  00000000  00029cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a66fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cc0  00000000  00000000  000a6778  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800710c <__do_global_dtors_aux>:
 800710c:	b510      	push	{r4, lr}
 800710e:	4c05      	ldr	r4, [pc, #20]	; (8007124 <__do_global_dtors_aux+0x18>)
 8007110:	7823      	ldrb	r3, [r4, #0]
 8007112:	b933      	cbnz	r3, 8007122 <__do_global_dtors_aux+0x16>
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <__do_global_dtors_aux+0x1c>)
 8007116:	b113      	cbz	r3, 800711e <__do_global_dtors_aux+0x12>
 8007118:	4804      	ldr	r0, [pc, #16]	; (800712c <__do_global_dtors_aux+0x20>)
 800711a:	f3af 8000 	nop.w
 800711e:	2301      	movs	r3, #1
 8007120:	7023      	strb	r3, [r4, #0]
 8007122:	bd10      	pop	{r4, pc}
 8007124:	20000010 	.word	0x20000010
 8007128:	00000000 	.word	0x00000000
 800712c:	080086fc 	.word	0x080086fc

08007130 <frame_dummy>:
 8007130:	b508      	push	{r3, lr}
 8007132:	4b03      	ldr	r3, [pc, #12]	; (8007140 <frame_dummy+0x10>)
 8007134:	b11b      	cbz	r3, 800713e <frame_dummy+0xe>
 8007136:	4903      	ldr	r1, [pc, #12]	; (8007144 <frame_dummy+0x14>)
 8007138:	4803      	ldr	r0, [pc, #12]	; (8007148 <frame_dummy+0x18>)
 800713a:	f3af 8000 	nop.w
 800713e:	bd08      	pop	{r3, pc}
 8007140:	00000000 	.word	0x00000000
 8007144:	20000014 	.word	0x20000014
 8007148:	080086fc 	.word	0x080086fc

0800714c <USB_LP_CAN1_RX0_IRQHandler>:

static void (*callBack)(void) = NULL;


void  USB_LP_CAN1_RX0_IRQHandler(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
	if(callBack != NULL)
 8007150:	4b04      	ldr	r3, [pc, #16]	; (8007164 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <USB_LP_CAN1_RX0_IRQHandler+0x12>
		callBack();
 8007158:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4798      	blx	r3
}
 800715e:	bf00      	nop
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	2000002c 	.word	0x2000002c

08007168 <CAN_Init>:



void CAN_Init(void (*ptr)(void))
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
	callBack = ptr;
 8007170:	4a5f      	ldr	r2, [pc, #380]	; (80072f0 <CAN_Init+0x188>)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6013      	str	r3, [r2, #0]

	RCC_EnablePeripheralClock(CAN_PERIPHERAL);
 8007176:	2039      	movs	r0, #57	; 0x39
 8007178:	f001 f908 	bl	800838c <RCC_EnablePeripheralClock>
//	RCC_EnablePeripheralClock(GPIOA_PERIPHERAL);
	RCC_EnablePeripheralClock(GPIOB_PERIPHERAL);
 800717c:	2043      	movs	r0, #67	; 0x43
 800717e:	f001 f905 	bl	800838c <RCC_EnablePeripheralClock>
	RCC_EnablePeripheralClock(AFIO_PERIPHERAL);
 8007182:	2040      	movs	r0, #64	; 0x40
 8007184:	f001 f902 	bl	800838c <RCC_EnablePeripheralClock>

	NVIC_EnableInterrupt(USB_LP_CAN1_RX0_IRQn);
 8007188:	2014      	movs	r0, #20
 800718a:	f001 f83f 	bl	800820c <NVIC_EnableInterrupt>


	CLR_BIT(CAN1->MCR, 1);		// exit sleep mode
 800718e:	4b59      	ldr	r3, [pc, #356]	; (80072f4 <CAN_Init+0x18c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a58      	ldr	r2, [pc, #352]	; (80072f4 <CAN_Init+0x18c>)
 8007194:	f023 0302 	bic.w	r3, r3, #2
 8007198:	6013      	str	r3, [r2, #0]
	while(GET_BIT(CAN1->MSR, 0) == 1);		// wait until sleep ack be 0
 800719a:	bf00      	nop
 800719c:	4b55      	ldr	r3, [pc, #340]	; (80072f4 <CAN_Init+0x18c>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d0f9      	beq.n	800719c <CAN_Init+0x34>


	SET_BIT(CAN1->MCR, 0);		// enter intialization mode
 80071a8:	4b52      	ldr	r3, [pc, #328]	; (80072f4 <CAN_Init+0x18c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a51      	ldr	r2, [pc, #324]	; (80072f4 <CAN_Init+0x18c>)
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	6013      	str	r3, [r2, #0]
	while(GET_BIT(CAN1->MSR, 0) == 0);		// wait until intialization ack be 1
 80071b4:	bf00      	nop
 80071b6:	4b4f      	ldr	r3, [pc, #316]	; (80072f4 <CAN_Init+0x18c>)
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0f9      	beq.n	80071b6 <CAN_Init+0x4e>

	SET_BIT(CAN1->IER, 1);		// FIFI 0 Rx IRQ enable
 80071c2:	4b4c      	ldr	r3, [pc, #304]	; (80072f4 <CAN_Init+0x18c>)
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	4a4b      	ldr	r2, [pc, #300]	; (80072f4 <CAN_Init+0x18c>)
 80071c8:	f043 0302 	orr.w	r3, r3, #2
 80071cc:	6153      	str	r3, [r2, #20]

//	SET_BIT(CAN1->BTR, 31);		// silent mode
	CLR_BIT(CAN1->BTR, 31);		// not silent mode
 80071ce:	4b49      	ldr	r3, [pc, #292]	; (80072f4 <CAN_Init+0x18c>)
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	4a48      	ldr	r2, [pc, #288]	; (80072f4 <CAN_Init+0x18c>)
 80071d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071d8:	61d3      	str	r3, [r2, #28]
//	SET_BIT(CAN1->BTR, 30);		// loopback mode
	CLR_BIT(CAN1->BTR, 30);		// not loopback mode
 80071da:	4b46      	ldr	r3, [pc, #280]	; (80072f4 <CAN_Init+0x18c>)
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	4a45      	ldr	r2, [pc, #276]	; (80072f4 <CAN_Init+0x18c>)
 80071e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071e4:	61d3      	str	r3, [r2, #28]

	// lower data rate to be 250 Kbps
	CAN1->BTR &= 0xF0000000;		// clear all register except high ones
 80071e6:	4b43      	ldr	r3, [pc, #268]	; (80072f4 <CAN_Init+0x18c>)
 80071e8:	69db      	ldr	r3, [r3, #28]
 80071ea:	4a42      	ldr	r2, [pc, #264]	; (80072f4 <CAN_Init+0x18c>)
 80071ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80071f0:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 0);		// BRP bits (9:0) = 1 --> prescaller = 2
 80071f2:	4b40      	ldr	r3, [pc, #256]	; (80072f4 <CAN_Init+0x18c>)
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	4a3f      	ldr	r2, [pc, #252]	; (80072f4 <CAN_Init+0x18c>)
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 1);		// BRP bits (9:0) = 3 --> prescaller = 4
 80071fe:	4b3d      	ldr	r3, [pc, #244]	; (80072f4 <CAN_Init+0x18c>)
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	4a3c      	ldr	r2, [pc, #240]	; (80072f4 <CAN_Init+0x18c>)
 8007204:	f043 0302 	orr.w	r3, r3, #2
 8007208:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 2);		// BRP bits (9:0) = 7 --> prescaller = 8
 800720a:	4b3a      	ldr	r3, [pc, #232]	; (80072f4 <CAN_Init+0x18c>)
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	4a39      	ldr	r2, [pc, #228]	; (80072f4 <CAN_Init+0x18c>)
 8007210:	f043 0304 	orr.w	r3, r3, #4
 8007214:	61d3      	str	r3, [r2, #28]

	SET_BIT(CAN1->BTR, 17);		// TS1 bits (19:16) = 2  --> t_BS1 = 3  tq
 8007216:	4b37      	ldr	r3, [pc, #220]	; (80072f4 <CAN_Init+0x18c>)
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	4a36      	ldr	r2, [pc, #216]	; (80072f4 <CAN_Init+0x18c>)
 800721c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007220:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 18);		// TS1 bits (19:16) = 6  --> t_BS1 = 7  tq
 8007222:	4b34      	ldr	r3, [pc, #208]	; (80072f4 <CAN_Init+0x18c>)
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	4a33      	ldr	r2, [pc, #204]	; (80072f4 <CAN_Init+0x18c>)
 8007228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800722c:	61d3      	str	r3, [r2, #28]
	SET_BIT(CAN1->BTR, 19);		// TS1 bits (19:16) = 14 --> t_BS1 = 15 tq
 800722e:	4b31      	ldr	r3, [pc, #196]	; (80072f4 <CAN_Init+0x18c>)
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	4a30      	ldr	r2, [pc, #192]	; (80072f4 <CAN_Init+0x18c>)
 8007234:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007238:	61d3      	str	r3, [r2, #28]

	SET_BIT(CAN1->BTR, 20);		// TS2 bits (22:20) = 1 --> t_BS2 = 2 tq
 800723a:	4b2e      	ldr	r3, [pc, #184]	; (80072f4 <CAN_Init+0x18c>)
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <CAN_Init+0x18c>)
 8007240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007244:	61d3      	str	r3, [r2, #28]

	SET_BIT(CAN1->BTR, 24);		// SJW bits (25:24) = 1 --> SJW = tq
 8007246:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <CAN_Init+0x18c>)
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <CAN_Init+0x18c>)
 800724c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007250:	61d3      	str	r3, [r2, #28]

//	CLR_BIT(CAN1->MCR, 16);	// no debug freeze
//	SET_BIT(CAN1->MCR, 4);	// no automatic retransmission


	CAN1->FMR &= ~(0x3FUL<<8);	// all filters for CAN1
 8007252:	4b28      	ldr	r3, [pc, #160]	; (80072f4 <CAN_Init+0x18c>)
 8007254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007258:	4a26      	ldr	r2, [pc, #152]	; (80072f4 <CAN_Init+0x18c>)
 800725a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800725e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1->FMR |=  (14UL<<8);		// all filters for CAN1
 8007262:	4b24      	ldr	r3, [pc, #144]	; (80072f4 <CAN_Init+0x18c>)
 8007264:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007268:	4a22      	ldr	r2, [pc, #136]	; (80072f4 <CAN_Init+0x18c>)
 800726a:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 800726e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	SET_BIT(CAN1->MCR, 6);		// Bus-Off is left automatically by hardware
 8007272:	4b20      	ldr	r3, [pc, #128]	; (80072f4 <CAN_Init+0x18c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <CAN_Init+0x18c>)
 8007278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727c:	6013      	str	r3, [r2, #0]

	SET_BIT(CAN1->MCR, 2);		// Tx mailbox priority by first requested
 800727e:	4b1d      	ldr	r3, [pc, #116]	; (80072f4 <CAN_Init+0x18c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <CAN_Init+0x18c>)
 8007284:	f043 0304 	orr.w	r3, r3, #4
 8007288:	6013      	str	r3, [r2, #0]

	CLR_BIT(CAN1->MCR, 0);		// exit intialization mode
 800728a:	4b1a      	ldr	r3, [pc, #104]	; (80072f4 <CAN_Init+0x18c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a19      	ldr	r2, [pc, #100]	; (80072f4 <CAN_Init+0x18c>)
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	6013      	str	r3, [r2, #0]
	while(GET_BIT(CAN1->MSR, 0) == 1);		// wait until intialization mode ack
 8007296:	bf00      	nop
 8007298:	4b16      	ldr	r3, [pc, #88]	; (80072f4 <CAN_Init+0x18c>)
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d0f9      	beq.n	8007298 <CAN_Init+0x130>


	// remap CAN pins, CAN_RX mapped to PB8, CAN_TX mapped to PB9
	SET_BIT(AFIO->MAPR, 14);
 80072a4:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <CAN_Init+0x190>)
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <CAN_Init+0x190>)
 80072aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072ae:	6053      	str	r3, [r2, #4]


	// CAN TX --> PA12 --> Alternate function push-pull
	GPIO_Pin_t  CAN_TxPin = {
 80072b0:	4b12      	ldr	r3, [pc, #72]	; (80072fc <CAN_Init+0x194>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	617b      	str	r3, [r7, #20]
		.port       =  GPIO_PORTB,
		.pinNumber  =  GPIO_PIN9
	};

	GPIO_PinConfg_t  CAN_TxPinConfig = {
 80072b6:	4b12      	ldr	r3, [pc, #72]	; (8007300 <CAN_Init+0x198>)
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	823b      	strh	r3, [r7, #16]
		.pinMode      =  ALTERNATE_FUNCTION_OUTPUT_PUSH_PULL,
		.outputSpeed  =  OUTPUT_SPEED_50MHz
	};

	GPIO_InitPins(&CAN_TxPin, &CAN_TxPinConfig);
 80072bc:	f107 0210 	add.w	r2, r7, #16
 80072c0:	f107 0314 	add.w	r3, r7, #20
 80072c4:	4611      	mov	r1, r2
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 ff3a 	bl	8008140 <GPIO_InitPins>



	// CAN RX --> PA11 --> Input floating / Input pull-up
	GPIO_Pin_t  CAN_RxPin = {
 80072cc:	4b0d      	ldr	r3, [pc, #52]	; (8007304 <CAN_Init+0x19c>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	60fb      	str	r3, [r7, #12]
		.port       =  GPIO_PORTB,
		.pinNumber  =  GPIO_PIN8
	};

	GPIO_PinConfg_t  CAN_RxPinConfig = {
 80072d2:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <CAN_Init+0x1a0>)
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	813b      	strh	r3, [r7, #8]
		.pinMode      =  INPUT_PULL_UP,
		.outputSpeed  =  OUTPUT_SPEED_50MHz
	};

	GPIO_InitPins(&CAN_RxPin, &CAN_RxPinConfig);
 80072d8:	f107 0208 	add.w	r2, r7, #8
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	4611      	mov	r1, r2
 80072e2:	4618      	mov	r0, r3
 80072e4:	f000 ff2c 	bl	8008140 <GPIO_InitPins>
}
 80072e8:	bf00      	nop
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	2000002c 	.word	0x2000002c
 80072f4:	40006400 	.word	0x40006400
 80072f8:	40010000 	.word	0x40010000
 80072fc:	08008714 	.word	0x08008714
 8007300:	08008718 	.word	0x08008718
 8007304:	0800871c 	.word	0x0800871c
 8007308:	08008720 	.word	0x08008720

0800730c <CAN_InitFilterBank>:



void CAN_InitFilterBank(CAN_RxFilterBankConfig_t*  filterConfig)
{
 800730c:	b490      	push	{r4, r7}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	if((filterConfig->filterBankNum) > 13)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b0d      	cmp	r3, #13
 800731a:	f200 8262 	bhi.w	80077e2 <CAN_InitFilterBank+0x4d6>
		return;


	SET_BIT(CAN1->FMR, 0);	// enter filter initialization mode
 800731e:	4ba9      	ldr	r3, [pc, #676]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007320:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007324:	4aa7      	ldr	r2, [pc, #668]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CLR_BIT(CAN1->FA1R, filterConfig->filterBankNum);		// deactivate filter
 800732e:	4ba5      	ldr	r3, [pc, #660]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007330:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	4619      	mov	r1, r3
 800733a:	2301      	movs	r3, #1
 800733c:	408b      	lsls	r3, r1
 800733e:	43db      	mvns	r3, r3
 8007340:	49a0      	ldr	r1, [pc, #640]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007342:	4013      	ands	r3, r2
 8007344:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c


	switch(filterConfig->desFifo)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	78db      	ldrb	r3, [r3, #3]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <CAN_InitFilterBank+0x4a>
 8007350:	2b01      	cmp	r3, #1
 8007352:	d00e      	beq.n	8007372 <CAN_InitFilterBank+0x66>
 8007354:	e01a      	b.n	800738c <CAN_InitFilterBank+0x80>
	{
		case FIFO_0:
			CLR_BIT(CAN1->FFA1R, filterConfig->filterBankNum);
 8007356:	4b9b      	ldr	r3, [pc, #620]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007358:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	4619      	mov	r1, r3
 8007362:	2301      	movs	r3, #1
 8007364:	408b      	lsls	r3, r1
 8007366:	43db      	mvns	r3, r3
 8007368:	4996      	ldr	r1, [pc, #600]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 800736a:	4013      	ands	r3, r2
 800736c:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		break;
 8007370:	e00c      	b.n	800738c <CAN_InitFilterBank+0x80>

		case FIFO_1:
			SET_BIT(CAN1->FFA1R, filterConfig->filterBankNum);
 8007372:	4b94      	ldr	r3, [pc, #592]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007374:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	4619      	mov	r1, r3
 800737e:	2301      	movs	r3, #1
 8007380:	408b      	lsls	r3, r1
 8007382:	4990      	ldr	r1, [pc, #576]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
		break;
 800738a:	bf00      	nop
	}


	switch(filterConfig->mode)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	789b      	ldrb	r3, [r3, #2]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8104 	beq.w	800759e <CAN_InitFilterBank+0x292>
 8007396:	2b01      	cmp	r3, #1
 8007398:	f040 820e 	bne.w	80077b8 <CAN_InitFilterBank+0x4ac>
	{
		case ID_MASK:
			CLR_BIT(CAN1->FM1R, filterConfig->filterBankNum);	// id mask mode
 800739c:	4b89      	ldr	r3, [pc, #548]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 800739e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	4619      	mov	r1, r3
 80073a8:	2301      	movs	r3, #1
 80073aa:	408b      	lsls	r3, r1
 80073ac:	43db      	mvns	r3, r3
 80073ae:	4985      	ldr	r1, [pc, #532]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204

			switch(filterConfig->scale)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	785b      	ldrb	r3, [r3, #1]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <CAN_InitFilterBank+0xb8>
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d057      	beq.n	8007472 <CAN_InitFilterBank+0x166>
							);
						break;
					}
				break;
			}
		break;
 80073c2:	e1f9      	b.n	80077b8 <CAN_InitFilterBank+0x4ac>
					CLR_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 16bit scale
 80073c4:	4b7f      	ldr	r3, [pc, #508]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 80073c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	4619      	mov	r1, r3
 80073d0:	2301      	movs	r3, #1
 80073d2:	408b      	lsls	r3, r1
 80073d4:	43db      	mvns	r3, r3
 80073d6:	497b      	ldr	r1, [pc, #492]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 80073d8:	4013      	ands	r3, r2
 80073da:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						(((u32)filterConfig->accepted[0].frameType)<<4)   |  // RTR
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	7b5b      	ldrb	r3, [r3, #13]
						((0UL)<<3)  |  // standard ID
 80073e2:	011a      	lsls	r2, r3, #4
						(((u32)filterConfig->accepted[0].id)<<5)          |  // ID
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	015b      	lsls	r3, r3, #5
						(((u32)filterConfig->accepted[0].frameType)<<4)   |  // RTR
 80073ea:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[0].maskIdType))<<19) |  // standard ID
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	7b92      	ldrb	r2, [r2, #14]
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	d102      	bne.n	80073fa <CAN_InitFilterBank+0xee>
 80073f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80073f8:	e000      	b.n	80073fc <CAN_InitFilterBank+0xf0>
 80073fa:	2200      	movs	r2, #0
						(((u32)filterConfig->accepted[0].id)<<5)          |  // ID
 80073fc:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<20)  |  // RTR
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	7bd2      	ldrb	r2, [r2, #15]
 8007402:	2a00      	cmp	r2, #0
 8007404:	d102      	bne.n	800740c <CAN_InitFilterBank+0x100>
 8007406:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800740a:	e000      	b.n	800740e <CAN_InitFilterBank+0x102>
 800740c:	2200      	movs	r2, #0
						(((u32)(!filterConfig->accepted[0].maskIdType))<<19) |  // standard ID
 800740e:	431a      	orrs	r2, r3
						(((u32)filterConfig->accepted[0].mask)<<21)       // ID mask
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	055b      	lsls	r3, r3, #21
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8007416:	486b      	ldr	r0, [pc, #428]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007418:	6879      	ldr	r1, [r7, #4]
 800741a:	7809      	ldrb	r1, [r1, #0]
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<20)  |  // RTR
 800741c:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 800741e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8007422:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						(((u32)filterConfig->accepted[1].frameType)<<4)  |  // RTR
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	7e5b      	ldrb	r3, [r3, #25]
						((0UL)<<3)  |  // standard ID
 800742a:	011a      	lsls	r2, r3, #4
						(((u32)filterConfig->accepted[1].id)<<5)    |   // ID
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	015b      	lsls	r3, r3, #5
						(((u32)filterConfig->accepted[1].frameType)<<4)  |  // RTR
 8007432:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[1].maskIdType))<<19)  |  // standard ID
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7e92      	ldrb	r2, [r2, #26]
 8007438:	2a00      	cmp	r2, #0
 800743a:	d102      	bne.n	8007442 <CAN_InitFilterBank+0x136>
 800743c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007440:	e000      	b.n	8007444 <CAN_InitFilterBank+0x138>
 8007442:	2200      	movs	r2, #0
						(((u32)filterConfig->accepted[1].id)<<5)    |   // ID
 8007444:	4313      	orrs	r3, r2
						(((u32)(!filterConfig->accepted[1].maskFrameType))<<20)  |  // RTR
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	7ed2      	ldrb	r2, [r2, #27]
 800744a:	2a00      	cmp	r2, #0
 800744c:	d102      	bne.n	8007454 <CAN_InitFilterBank+0x148>
 800744e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007452:	e000      	b.n	8007456 <CAN_InitFilterBank+0x14a>
 8007454:	2200      	movs	r2, #0
						(((u32)(!filterConfig->accepted[1].maskIdType))<<19)  |  // standard ID
 8007456:	431a      	orrs	r2, r3
						(((u32)filterConfig->accepted[1].mask)<<21)       // ID mask
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	055b      	lsls	r3, r3, #21
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 800745e:	4859      	ldr	r0, [pc, #356]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007460:	6879      	ldr	r1, [r7, #4]
 8007462:	7809      	ldrb	r1, [r1, #0]
						(((u32)(!filterConfig->accepted[1].maskFrameType))<<20)  |  // RTR
 8007464:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8007466:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	4403      	add	r3, r0
 800746e:	605a      	str	r2, [r3, #4]
				break;
 8007470:	e094      	b.n	800759c <CAN_InitFilterBank+0x290>
					SET_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 32bit scale
 8007472:	4b54      	ldr	r3, [pc, #336]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007474:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	4619      	mov	r1, r3
 800747e:	2301      	movs	r3, #1
 8007480:	408b      	lsls	r3, r1
 8007482:	4950      	ldr	r1, [pc, #320]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						(((u32)filterConfig->accepted[0].frameType)<<1)  |  // RTR
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7b5b      	ldrb	r3, [r3, #13]
 800748e:	005a      	lsls	r2, r3, #1
						(((u32)filterConfig->accepted[0].idType)<<2)     |  // IDE
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7b1b      	ldrb	r3, [r3, #12]
 8007494:	009b      	lsls	r3, r3, #2
						(((u32)filterConfig->accepted[0].frameType)<<1)  |  // RTR
 8007496:	4313      	orrs	r3, r2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8007498:	494a      	ldr	r1, [pc, #296]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	7812      	ldrb	r2, [r2, #0]
 800749e:	4610      	mov	r0, r2
						(((u32)filterConfig->accepted[0].idType)<<2)     |  // IDE
 80074a0:	f063 023f 	orn	r2, r3, #63	; 0x3f
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 80074a4:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80074a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<1)  |  // RTR
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	7bdb      	ldrb	r3, [r3, #15]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <CAN_InitFilterBank+0x1ac>
 80074b4:	2202      	movs	r2, #2
 80074b6:	e000      	b.n	80074ba <CAN_InitFilterBank+0x1ae>
 80074b8:	2200      	movs	r2, #0
						(((u32)(!filterConfig->accepted[0].maskIdType))<<2)     |  // IDE
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	7b9b      	ldrb	r3, [r3, #14]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <CAN_InitFilterBank+0x1ba>
 80074c2:	2304      	movs	r3, #4
 80074c4:	e000      	b.n	80074c8 <CAN_InitFilterBank+0x1bc>
 80074c6:	2300      	movs	r3, #0
						(((u32)(!filterConfig->accepted[0].maskFrameType))<<1)  |  // RTR
 80074c8:	4313      	orrs	r3, r2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 80074ca:	493e      	ldr	r1, [pc, #248]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	4610      	mov	r0, r2
						(((u32)(!filterConfig->accepted[0].maskIdType))<<2)     |  // IDE
 80074d2:	f063 023f 	orn	r2, r3, #63	; 0x3f
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 80074d6:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80074da:	00db      	lsls	r3, r3, #3
 80074dc:	440b      	add	r3, r1
 80074de:	605a      	str	r2, [r3, #4]
					switch(filterConfig->accepted[0].idType)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7b1b      	ldrb	r3, [r3, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <CAN_InitFilterBank+0x1e2>
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d02d      	beq.n	8007548 <CAN_InitFilterBank+0x23c>
				break;
 80074ec:	e055      	b.n	800759a <CAN_InitFilterBank+0x28e>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 80074ee:	4a35      	ldr	r2, [pc, #212]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	3348      	adds	r3, #72	; 0x48
 80074f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								((filterConfig->accepted[0].id)<<21)    |  // standard  ID
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	055b      	lsls	r3, r3, #21
 8007500:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8007504:	ea6f 5343 	mvn.w	r3, r3, lsl #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 8007508:	482e      	ldr	r0, [pc, #184]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	7809      	ldrb	r1, [r1, #0]
 800750e:	401a      	ands	r2, r3
 8007510:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8007514:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 8007518:	4a2a      	ldr	r2, [pc, #168]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	3348      	adds	r3, #72	; 0x48
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	4413      	add	r3, r2
 8007524:	685a      	ldr	r2, [r3, #4]
								((filterConfig->accepted[0].mask)<<21)    |  // standard  ID
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	055b      	lsls	r3, r3, #21
 800752c:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 8007530:	ea6f 5343 	mvn.w	r3, r3, lsl #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 8007534:	4823      	ldr	r0, [pc, #140]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	7809      	ldrb	r1, [r1, #0]
 800753a:	401a      	ands	r2, r3
 800753c:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4403      	add	r3, r0
 8007544:	605a      	str	r2, [r3, #4]
						break;
 8007546:	e028      	b.n	800759a <CAN_InitFilterBank+0x28e>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 8007548:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	3348      	adds	r3, #72	; 0x48
 8007550:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								(((u32)filterConfig->accepted[0].id)<<3)   |   // extended ID
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	f043 0307 	orr.w	r3, r3, #7
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 &= (
 800755e:	4819      	ldr	r0, [pc, #100]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007560:	6879      	ldr	r1, [r7, #4]
 8007562:	7809      	ldrb	r1, [r1, #0]
 8007564:	401a      	ands	r2, r3
 8007566:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800756a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 800756e:	4a15      	ldr	r2, [pc, #84]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	3348      	adds	r3, #72	; 0x48
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	4413      	add	r3, r2
 800757a:	685a      	ldr	r2, [r3, #4]
								(((u32)filterConfig->accepted[0].mask)<<3)     |  // extended ID
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	00db      	lsls	r3, r3, #3
 8007582:	f043 0307 	orr.w	r3, r3, #7
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 &= (
 8007586:	480f      	ldr	r0, [pc, #60]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	7809      	ldrb	r1, [r1, #0]
 800758c:	401a      	ands	r2, r3
 800758e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4403      	add	r3, r0
 8007596:	605a      	str	r2, [r3, #4]
						break;
 8007598:	bf00      	nop
				break;
 800759a:	bf00      	nop
		break;
 800759c:	e10c      	b.n	80077b8 <CAN_InitFilterBank+0x4ac>

		case ID_LIST:
			SET_BIT(CAN1->FM1R, filterConfig->filterBankNum);
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 80075a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	4619      	mov	r1, r3
 80075aa:	2301      	movs	r3, #1
 80075ac:	408b      	lsls	r3, r1
 80075ae:	4905      	ldr	r1, [pc, #20]	; (80075c4 <CAN_InitFilterBank+0x2b8>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204

			switch(filterConfig->scale)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <CAN_InitFilterBank+0x2bc>
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d075      	beq.n	80076ae <CAN_InitFilterBank+0x3a2>
							);
						break;
					}
				break;
			}
		break;
 80075c2:	e0f8      	b.n	80077b6 <CAN_InitFilterBank+0x4aa>
 80075c4:	40006400 	.word	0x40006400
					CLR_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 16bit scale
 80075c8:	4b88      	ldr	r3, [pc, #544]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80075ca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	4619      	mov	r1, r3
 80075d4:	2301      	movs	r3, #1
 80075d6:	408b      	lsls	r3, r1
 80075d8:	43db      	mvns	r3, r3
 80075da:	4984      	ldr	r1, [pc, #528]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80075dc:	4013      	ands	r3, r2
 80075de:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						((filterConfig->accepted[0].idType)<<3)  |  // standard ID
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7b1b      	ldrb	r3, [r3, #12]
 80075e6:	00da      	lsls	r2, r3, #3
						((filterConfig->accepted[0].frameType)<<4)  |  // RTR
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7b5b      	ldrb	r3, [r3, #13]
 80075ec:	011b      	lsls	r3, r3, #4
						((filterConfig->accepted[0].idType)<<3)  |  // standard ID
 80075ee:	4313      	orrs	r3, r2
 80075f0:	461c      	mov	r4, r3
						((filterConfig->accepted[0].id)<<5)    // ID
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	015b      	lsls	r3, r3, #5
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 80075f8:	497c      	ldr	r1, [pc, #496]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	4610      	mov	r0, r2
						((filterConfig->accepted[0].frameType)<<4)  |  // RTR
 8007600:	ea44 0203 	orr.w	r2, r4, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 8007604:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8007608:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 800760c:	4a77      	ldr	r2, [pc, #476]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	3348      	adds	r3, #72	; 0x48
 8007614:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
						((filterConfig->accepted[1].idType)<<19)  |  // standard ID
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	7e1b      	ldrb	r3, [r3, #24]
 800761c:	04d9      	lsls	r1, r3, #19
						((filterConfig->accepted[1].frameType)<<20)  |  // RTR
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7e5b      	ldrb	r3, [r3, #25]
 8007622:	051b      	lsls	r3, r3, #20
						((filterConfig->accepted[1].idType)<<19)  |  // standard ID
 8007624:	430b      	orrs	r3, r1
 8007626:	4619      	mov	r1, r3
						((filterConfig->accepted[1].id)<<21)    // ID
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	691b      	ldr	r3, [r3, #16]
 800762c:	055b      	lsls	r3, r3, #21
						((filterConfig->accepted[1].frameType)<<20)  |  // RTR
 800762e:	430b      	orrs	r3, r1
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8007630:	486e      	ldr	r0, [pc, #440]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	7809      	ldrb	r1, [r1, #0]
 8007636:	431a      	orrs	r2, r3
 8007638:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800763c:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						((filterConfig->accepted[2].idType)<<3)  |  // standard ID
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007646:	00da      	lsls	r2, r3, #3
						((filterConfig->accepted[2].frameType)<<4)  |  // RTR
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800764e:	011b      	lsls	r3, r3, #4
						((filterConfig->accepted[2].idType)<<3)  |  // standard ID
 8007650:	4313      	orrs	r3, r2
 8007652:	461c      	mov	r4, r3
						((filterConfig->accepted[2].id)<<5)    // ID
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	015b      	lsls	r3, r3, #5
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 800765a:	4964      	ldr	r1, [pc, #400]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7812      	ldrb	r2, [r2, #0]
 8007660:	4610      	mov	r0, r2
						((filterConfig->accepted[2].frameType)<<4)  |  // RTR
 8007662:	ea44 0203 	orr.w	r2, r4, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8007666:	f100 0348 	add.w	r3, r0, #72	; 0x48
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	440b      	add	r3, r1
 800766e:	605a      	str	r2, [r3, #4]
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8007670:	4a5e      	ldr	r2, [pc, #376]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	3348      	adds	r3, #72	; 0x48
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	4413      	add	r3, r2
 800767c:	685a      	ldr	r2, [r3, #4]
						((filterConfig->accepted[3].idType)<<19)  |  // standard ID
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007684:	04d9      	lsls	r1, r3, #19
						((filterConfig->accepted[3].frameType)<<20)  |  // RTR
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800768c:	051b      	lsls	r3, r3, #20
						((filterConfig->accepted[3].idType)<<19)  |  // standard ID
 800768e:	430b      	orrs	r3, r1
 8007690:	4619      	mov	r1, r3
						((filterConfig->accepted[3].id)<<21)    // ID
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	055b      	lsls	r3, r3, #21
						((filterConfig->accepted[3].frameType)<<20)  |  // RTR
 8007698:	430b      	orrs	r3, r1
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 800769a:	4854      	ldr	r0, [pc, #336]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	7809      	ldrb	r1, [r1, #0]
 80076a0:	431a      	orrs	r2, r3
 80076a2:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	4403      	add	r3, r0
 80076aa:	605a      	str	r2, [r3, #4]
				break;
 80076ac:	e083      	b.n	80077b6 <CAN_InitFilterBank+0x4aa>
					SET_BIT(CAN1->FS1R, filterConfig->filterBankNum);	// 32bit scale
 80076ae:	4b4f      	ldr	r3, [pc, #316]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80076b0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	2301      	movs	r3, #1
 80076bc:	408b      	lsls	r3, r1
 80076be:	494b      	ldr	r1, [pc, #300]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
						((u32)(filterConfig->accepted[0].frameType)<<1)  |  // RTR
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	7b5b      	ldrb	r3, [r3, #13]
 80076ca:	005a      	lsls	r2, r3, #1
						((u32)(filterConfig->accepted[0].idType)<<2)    // IDE
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	7b1b      	ldrb	r3, [r3, #12]
 80076d0:	009b      	lsls	r3, r3, #2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 80076d2:	4846      	ldr	r0, [pc, #280]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	7809      	ldrb	r1, [r1, #0]
						((u32)(filterConfig->accepted[0].frameType)<<1)  |  // RTR
 80076d8:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 = (
 80076da:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80076de:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
					switch(filterConfig->accepted[0].idType)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	7b1b      	ldrb	r3, [r3, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <CAN_InitFilterBank+0x3e4>
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d012      	beq.n	8007714 <CAN_InitFilterBank+0x408>
 80076ee:	e023      	b.n	8007738 <CAN_InitFilterBank+0x42c>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 80076f0:	4a3e      	ldr	r2, [pc, #248]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	3348      	adds	r3, #72	; 0x48
 80076f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								((u32)(filterConfig->accepted[0].id)<<21)    // ID
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	055b      	lsls	r3, r3, #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8007702:	483a      	ldr	r0, [pc, #232]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	7809      	ldrb	r1, [r1, #0]
 8007708:	431a      	orrs	r2, r3
 800770a:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800770e:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						break;
 8007712:	e011      	b.n	8007738 <CAN_InitFilterBank+0x42c>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8007714:	4a35      	ldr	r2, [pc, #212]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	3348      	adds	r3, #72	; 0x48
 800771c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
								((u32)(filterConfig->accepted[0].id)<<3)    // ID
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	00db      	lsls	r3, r3, #3
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR1 |= (
 8007726:	4831      	ldr	r0, [pc, #196]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	7809      	ldrb	r1, [r1, #0]
 800772c:	431a      	orrs	r2, r3
 800772e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8007732:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
						break;
 8007736:	bf00      	nop
						((u32)(filterConfig->accepted[1].frameType)<<1)  |  // RTR
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	7e5b      	ldrb	r3, [r3, #25]
 800773c:	005a      	lsls	r2, r3, #1
						((u32)(filterConfig->accepted[1].idType)<<2)    // IDE
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7e1b      	ldrb	r3, [r3, #24]
 8007742:	009b      	lsls	r3, r3, #2
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 8007744:	4829      	ldr	r0, [pc, #164]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	7809      	ldrb	r1, [r1, #0]
						((u32)(filterConfig->accepted[1].frameType)<<1)  |  // RTR
 800774a:	431a      	orrs	r2, r3
					CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 = (
 800774c:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	4403      	add	r3, r0
 8007754:	605a      	str	r2, [r3, #4]
					switch(filterConfig->accepted[1].idType)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7e1b      	ldrb	r3, [r3, #24]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <CAN_InitFilterBank+0x458>
 800775e:	2b01      	cmp	r3, #1
 8007760:	d014      	beq.n	800778c <CAN_InitFilterBank+0x480>
				break;
 8007762:	e027      	b.n	80077b4 <CAN_InitFilterBank+0x4a8>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8007764:	4a21      	ldr	r2, [pc, #132]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	3348      	adds	r3, #72	; 0x48
 800776c:	00db      	lsls	r3, r3, #3
 800776e:	4413      	add	r3, r2
 8007770:	685a      	ldr	r2, [r3, #4]
								((u32)(filterConfig->accepted[1].id)<<21)    // ID
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	055b      	lsls	r3, r3, #21
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 8007778:	481c      	ldr	r0, [pc, #112]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	7809      	ldrb	r1, [r1, #0]
 800777e:	431a      	orrs	r2, r3
 8007780:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	4403      	add	r3, r0
 8007788:	605a      	str	r2, [r3, #4]
						break;
 800778a:	e013      	b.n	80077b4 <CAN_InitFilterBank+0x4a8>
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 800778c:	4a17      	ldr	r2, [pc, #92]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	3348      	adds	r3, #72	; 0x48
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4413      	add	r3, r2
 8007798:	685a      	ldr	r2, [r3, #4]
								((u32)(filterConfig->accepted[1].id)<<3)    // ID
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	00db      	lsls	r3, r3, #3
							CAN1->sFilterRegister[filterConfig->filterBankNum].FR2 |= (
 80077a0:	4812      	ldr	r0, [pc, #72]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80077a2:	6879      	ldr	r1, [r7, #4]
 80077a4:	7809      	ldrb	r1, [r1, #0]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	4403      	add	r3, r0
 80077b0:	605a      	str	r2, [r3, #4]
						break;
 80077b2:	bf00      	nop
				break;
 80077b4:	bf00      	nop
		break;
 80077b6:	bf00      	nop
	}



	SET_BIT(CAN1->FA1R, filterConfig->filterBankNum);		// activate filter
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80077ba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	4619      	mov	r1, r3
 80077c4:	2301      	movs	r3, #1
 80077c6:	408b      	lsls	r3, r1
 80077c8:	4908      	ldr	r1, [pc, #32]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

	CLR_BIT(CAN1->FMR, 0);	// exit filter initialization mode
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80077d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80077d6:	4a05      	ldr	r2, [pc, #20]	; (80077ec <CAN_InitFilterBank+0x4e0>)
 80077d8:	f023 0301 	bic.w	r3, r3, #1
 80077dc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 80077e0:	e000      	b.n	80077e4 <CAN_InitFilterBank+0x4d8>
		return;
 80077e2:	bf00      	nop
}
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc90      	pop	{r4, r7}
 80077ea:	4770      	bx	lr
 80077ec:	40006400 	.word	0x40006400

080077f0 <CAN_Tx>:




void CAN_Tx(CAN_Frame_t* frame)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	/* wait while all three mailboxes are busy (bits 26, 27, 28 are 0) */
	while((((CAN1->TSR)>>26) & 0x7) == 0);
 80077f8:	bf00      	nop
 80077fa:	4b78      	ldr	r3, [pc, #480]	; (80079dc <CAN_Tx+0x1ec>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	0e9b      	lsrs	r3, r3, #26
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0f8      	beq.n	80077fa <CAN_Tx+0xa>

	u8 freeMailBox = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
	for(u8 i = 0; i < 3; i++)
 800780c:	2300      	movs	r3, #0
 800780e:	73bb      	strb	r3, [r7, #14]
 8007810:	e00f      	b.n	8007832 <CAN_Tx+0x42>
	{
		if(GET_BIT(CAN1->TSR, i + 26) == 1)
 8007812:	4b72      	ldr	r3, [pc, #456]	; (80079dc <CAN_Tx+0x1ec>)
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	7bbb      	ldrb	r3, [r7, #14]
 8007818:	331a      	adds	r3, #26
 800781a:	fa22 f303 	lsr.w	r3, r2, r3
 800781e:	f003 0301 	and.w	r3, r3, #1
 8007822:	2b01      	cmp	r3, #1
 8007824:	d102      	bne.n	800782c <CAN_Tx+0x3c>
		{
			freeMailBox = i;
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	73fb      	strb	r3, [r7, #15]
			break;
 800782a:	e005      	b.n	8007838 <CAN_Tx+0x48>
	for(u8 i = 0; i < 3; i++)
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	3301      	adds	r3, #1
 8007830:	73bb      	strb	r3, [r7, #14]
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b02      	cmp	r3, #2
 8007836:	d9ec      	bls.n	8007812 <CAN_Tx+0x22>
		}
	}

	/* fill lowest 4 bytes of data in TDLR register */
	CAN1->sTxMailBox[freeMailBox].TDLR = 0;
 8007838:	4a68      	ldr	r2, [pc, #416]	; (80079dc <CAN_Tx+0x1ec>)
 800783a:	7bfb      	ldrb	r3, [r7, #15]
 800783c:	011b      	lsls	r3, r3, #4
 800783e:	4413      	add	r3, r2
 8007840:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 8007848:	2300      	movs	r3, #0
 800784a:	737b      	strb	r3, [r7, #13]
 800784c:	e01b      	b.n	8007886 <CAN_Tx+0x96>
	{
		CAN1->sTxMailBox[freeMailBox].TDLR |= (frame->data[i])<<(i<<3);
 800784e:	4a63      	ldr	r2, [pc, #396]	; (80079dc <CAN_Tx+0x1ec>)
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	011b      	lsls	r3, r3, #4
 8007854:	4413      	add	r3, r2
 8007856:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	7b7b      	ldrb	r3, [r7, #13]
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	440b      	add	r3, r1
 8007862:	79db      	ldrb	r3, [r3, #7]
 8007864:	4619      	mov	r1, r3
 8007866:	7b7b      	ldrb	r3, [r7, #13]
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	fa01 f303 	lsl.w	r3, r1, r3
 800786e:	4618      	mov	r0, r3
 8007870:	495a      	ldr	r1, [pc, #360]	; (80079dc <CAN_Tx+0x1ec>)
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	4302      	orrs	r2, r0
 8007876:	011b      	lsls	r3, r3, #4
 8007878:	440b      	add	r3, r1
 800787a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800787e:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 8007880:	7b7b      	ldrb	r3, [r7, #13]
 8007882:	3301      	adds	r3, #1
 8007884:	737b      	strb	r3, [r7, #13]
 8007886:	7b7b      	ldrb	r3, [r7, #13]
 8007888:	2b03      	cmp	r3, #3
 800788a:	d9e0      	bls.n	800784e <CAN_Tx+0x5e>
	}

	/* fill highest 4 bytes of data in TDHR register */
	CAN1->sTxMailBox[freeMailBox].TDHR = 0;
 800788c:	4a53      	ldr	r2, [pc, #332]	; (80079dc <CAN_Tx+0x1ec>)
 800788e:	7bfb      	ldrb	r3, [r7, #15]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	4413      	add	r3, r2
 8007894:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 800789c:	2300      	movs	r3, #0
 800789e:	733b      	strb	r3, [r7, #12]
 80078a0:	e01c      	b.n	80078dc <CAN_Tx+0xec>
	{
		CAN1->sTxMailBox[freeMailBox].TDHR |= (frame->data[i + 4])<<(i<<3);
 80078a2:	4a4e      	ldr	r2, [pc, #312]	; (80079dc <CAN_Tx+0x1ec>)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	7b3b      	ldrb	r3, [r7, #12]
 80078b2:	3304      	adds	r3, #4
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	440b      	add	r3, r1
 80078b8:	79db      	ldrb	r3, [r3, #7]
 80078ba:	4619      	mov	r1, r3
 80078bc:	7b3b      	ldrb	r3, [r7, #12]
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	4618      	mov	r0, r3
 80078c6:	4945      	ldr	r1, [pc, #276]	; (80079dc <CAN_Tx+0x1ec>)
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
 80078ca:	4302      	orrs	r2, r0
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	440b      	add	r3, r1
 80078d0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80078d4:	601a      	str	r2, [r3, #0]
	for(u8 i = 0; i < 4; i++)
 80078d6:	7b3b      	ldrb	r3, [r7, #12]
 80078d8:	3301      	adds	r3, #1
 80078da:	733b      	strb	r3, [r7, #12]
 80078dc:	7b3b      	ldrb	r3, [r7, #12]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d9df      	bls.n	80078a2 <CAN_Tx+0xb2>
	}

	CAN1->sTxMailBox[freeMailBox].TDTR = frame->DLC;			// Data Lenght Code (DLC)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7999      	ldrb	r1, [r3, #6]
 80078e6:	4a3d      	ldr	r2, [pc, #244]	; (80079dc <CAN_Tx+0x1ec>)
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	3318      	adds	r3, #24
 80078ec:	011b      	lsls	r3, r3, #4
 80078ee:	4413      	add	r3, r2
 80078f0:	3304      	adds	r3, #4
 80078f2:	6019      	str	r1, [r3, #0]


	/* configure IDE & RTR */
	CAN1->sTxMailBox[freeMailBox].TIR = (
		((frame->frameType)<<1)  |   // RTR
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	795b      	ldrb	r3, [r3, #5]
 80078f8:	005a      	lsls	r2, r3, #1
		((frame->idType)<<2)         // IDE
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	791b      	ldrb	r3, [r3, #4]
 80078fe:	009b      	lsls	r3, r3, #2
		((frame->frameType)<<1)  |   // RTR
 8007900:	ea42 0103 	orr.w	r1, r2, r3
	CAN1->sTxMailBox[freeMailBox].TIR = (
 8007904:	4a35      	ldr	r2, [pc, #212]	; (80079dc <CAN_Tx+0x1ec>)
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	3318      	adds	r3, #24
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	4413      	add	r3, r2
 800790e:	6019      	str	r1, [r3, #0]
	);

	/* configure ID */
	switch(frame->idType)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	791b      	ldrb	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <CAN_Tx+0x12e>
 8007918:	2b01      	cmp	r3, #1
 800791a:	d011      	beq.n	8007940 <CAN_Tx+0x150>
 800791c:	e021      	b.n	8007962 <CAN_Tx+0x172>
	{
		case STANDARD_ID:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<21;
 800791e:	4a2f      	ldr	r2, [pc, #188]	; (80079dc <CAN_Tx+0x1ec>)
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	3318      	adds	r3, #24
 8007924:	011b      	lsls	r3, r3, #4
 8007926:	4413      	add	r3, r2
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	055a      	lsls	r2, r3, #21
 8007930:	482a      	ldr	r0, [pc, #168]	; (80079dc <CAN_Tx+0x1ec>)
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	430a      	orrs	r2, r1
 8007936:	3318      	adds	r3, #24
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	4403      	add	r3, r0
 800793c:	601a      	str	r2, [r3, #0]
		break;
 800793e:	e010      	b.n	8007962 <CAN_Tx+0x172>

		case EXTENDED_ID:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<3;
 8007940:	4a26      	ldr	r2, [pc, #152]	; (80079dc <CAN_Tx+0x1ec>)
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	3318      	adds	r3, #24
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	4413      	add	r3, r2
 800794a:	6819      	ldr	r1, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	00da      	lsls	r2, r3, #3
 8007952:	4822      	ldr	r0, [pc, #136]	; (80079dc <CAN_Tx+0x1ec>)
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	430a      	orrs	r2, r1
 8007958:	3318      	adds	r3, #24
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	4403      	add	r3, r0
 800795e:	601a      	str	r2, [r3, #0]
		break;
 8007960:	bf00      	nop
	}


	switch(frame->frameType)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	795b      	ldrb	r3, [r3, #5]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <CAN_Tx+0x180>
 800796a:	2b01      	cmp	r3, #1
 800796c:	d011      	beq.n	8007992 <CAN_Tx+0x1a2>
 800796e:	e021      	b.n	80079b4 <CAN_Tx+0x1c4>
	{
		case DATA_FRAME:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<21;
 8007970:	4a1a      	ldr	r2, [pc, #104]	; (80079dc <CAN_Tx+0x1ec>)
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	3318      	adds	r3, #24
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	4413      	add	r3, r2
 800797a:	6819      	ldr	r1, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	055a      	lsls	r2, r3, #21
 8007982:	4816      	ldr	r0, [pc, #88]	; (80079dc <CAN_Tx+0x1ec>)
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	430a      	orrs	r2, r1
 8007988:	3318      	adds	r3, #24
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	4403      	add	r3, r0
 800798e:	601a      	str	r2, [r3, #0]
		break;
 8007990:	e010      	b.n	80079b4 <CAN_Tx+0x1c4>

		case REMOTE_FRAME:
			CAN1->sTxMailBox[freeMailBox].TIR |= (frame->id)<<3;
 8007992:	4a12      	ldr	r2, [pc, #72]	; (80079dc <CAN_Tx+0x1ec>)
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	3318      	adds	r3, #24
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	4413      	add	r3, r2
 800799c:	6819      	ldr	r1, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	00da      	lsls	r2, r3, #3
 80079a4:	480d      	ldr	r0, [pc, #52]	; (80079dc <CAN_Tx+0x1ec>)
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	3318      	adds	r3, #24
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	4403      	add	r3, r0
 80079b0:	601a      	str	r2, [r3, #0]
		break;
 80079b2:	bf00      	nop
	}


	SET_BIT(CAN1->sTxMailBox[freeMailBox].TIR, 0);	// Tx request
 80079b4:	4a09      	ldr	r2, [pc, #36]	; (80079dc <CAN_Tx+0x1ec>)
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	3318      	adds	r3, #24
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	4413      	add	r3, r2
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	4906      	ldr	r1, [pc, #24]	; (80079dc <CAN_Tx+0x1ec>)
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	f042 0201 	orr.w	r2, r2, #1
 80079c8:	3318      	adds	r3, #24
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	440b      	add	r3, r1
 80079ce:	601a      	str	r2, [r3, #0]
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	40006400 	.word	0x40006400

080079e0 <CAN_Rx>:


void CAN_Rx(CAN_Frame_t* frame, CAN_RxFifo_t fifo)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
	// wait until there's received data in FIFO
	switch(fifo)
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <CAN_Rx+0x18>
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d008      	beq.n	8007a08 <CAN_Rx+0x28>
 80079f6:	e00f      	b.n	8007a18 <CAN_Rx+0x38>
	{
		case FIFO_0:
			while((CAN1->RF0R & 0x3) == 0);
 80079f8:	bf00      	nop
 80079fa:	4b57      	ldr	r3, [pc, #348]	; (8007b58 <CAN_Rx+0x178>)
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f9      	beq.n	80079fa <CAN_Rx+0x1a>
		break;
 8007a06:	e007      	b.n	8007a18 <CAN_Rx+0x38>

		case FIFO_1:
			while((CAN1->RF1R & 0x3) == 0);
 8007a08:	bf00      	nop
 8007a0a:	4b53      	ldr	r3, [pc, #332]	; (8007b58 <CAN_Rx+0x178>)
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f9      	beq.n	8007a0a <CAN_Rx+0x2a>
		break;
 8007a16:	bf00      	nop
	}


	/* read frame type (RTR) */
	switch(GET_BIT(CAN1->sFIFOMailBox[fifo].RIR, 1))
 8007a18:	4a4f      	ldr	r2, [pc, #316]	; (8007b58 <CAN_Rx+0x178>)
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	331b      	adds	r3, #27
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	4413      	add	r3, r2
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <CAN_Rx+0x54>
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d004      	beq.n	8007a3c <CAN_Rx+0x5c>
 8007a32:	e007      	b.n	8007a44 <CAN_Rx+0x64>
	{
		case 0:
			frame->frameType = DATA_FRAME;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	715a      	strb	r2, [r3, #5]
		break;
 8007a3a:	e003      	b.n	8007a44 <CAN_Rx+0x64>

		case 1:
			frame->frameType = REMOTE_FRAME;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	715a      	strb	r2, [r3, #5]
		break;
 8007a42:	bf00      	nop
	}


	/* read ID type (IDE) */
	switch(GET_BIT(CAN1->sFIFOMailBox[fifo].RIR, 2))
 8007a44:	4a44      	ldr	r2, [pc, #272]	; (8007b58 <CAN_Rx+0x178>)
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	331b      	adds	r3, #27
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	4413      	add	r3, r2
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	089b      	lsrs	r3, r3, #2
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d002      	beq.n	8007a60 <CAN_Rx+0x80>
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d004      	beq.n	8007a68 <CAN_Rx+0x88>
 8007a5e:	e007      	b.n	8007a70 <CAN_Rx+0x90>
	{
		case 0:
			frame->idType = STANDARD_ID;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	711a      	strb	r2, [r3, #4]
		break;
 8007a66:	e003      	b.n	8007a70 <CAN_Rx+0x90>

		case 1:
			frame->idType = EXTENDED_ID;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	711a      	strb	r2, [r3, #4]
		break;
 8007a6e:	bf00      	nop
	}


	/* read ID */
	switch(frame->idType)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	791b      	ldrb	r3, [r3, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <CAN_Rx+0x9e>
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d00a      	beq.n	8007a92 <CAN_Rx+0xb2>
 8007a7c:	e013      	b.n	8007aa6 <CAN_Rx+0xc6>
	{
		case STANDARD_ID:
			frame->id = (CAN1->sFIFOMailBox[fifo].RIR)>>21;
 8007a7e:	4a36      	ldr	r2, [pc, #216]	; (8007b58 <CAN_Rx+0x178>)
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	331b      	adds	r3, #27
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	4413      	add	r3, r2
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	0d5a      	lsrs	r2, r3, #21
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	601a      	str	r2, [r3, #0]
		break;
 8007a90:	e009      	b.n	8007aa6 <CAN_Rx+0xc6>

		case 1:
			frame->id = (CAN1->sFIFOMailBox[fifo].RIR)>>3;
 8007a92:	4a31      	ldr	r2, [pc, #196]	; (8007b58 <CAN_Rx+0x178>)
 8007a94:	78fb      	ldrb	r3, [r7, #3]
 8007a96:	331b      	adds	r3, #27
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	4413      	add	r3, r2
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	08da      	lsrs	r2, r3, #3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	601a      	str	r2, [r3, #0]
		break;
 8007aa4:	bf00      	nop
	}


	/* read DLC */
	frame->DLC = (CAN1->sFIFOMailBox[fifo].RDTR) & 0xF;
 8007aa6:	4a2c      	ldr	r2, [pc, #176]	; (8007b58 <CAN_Rx+0x178>)
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	331b      	adds	r3, #27
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	4413      	add	r3, r2
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	719a      	strb	r2, [r3, #6]



	/* read lower 4 bytes of data from RDLR register */
	for(u8 i = 0; i < 4; i++)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	e012      	b.n	8007aec <CAN_Rx+0x10c>
	{
		frame->data[i] = (CAN1->sFIFOMailBox[fifo].RDLR)>>(i<<3);
 8007ac6:	4a24      	ldr	r2, [pc, #144]	; (8007b58 <CAN_Rx+0x178>)
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	40da      	lsrs	r2, r3
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	b2d1      	uxtb	r1, r2
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	71da      	strb	r2, [r3, #7]
	for(u8 i = 0; i < 4; i++)
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d9e9      	bls.n	8007ac6 <CAN_Rx+0xe6>
	}

	/* read higher 4 bytes of data from RDHR register */
	for(u8 i = 0; i < 4; i++)
 8007af2:	2300      	movs	r3, #0
 8007af4:	73bb      	strb	r3, [r7, #14]
 8007af6:	e013      	b.n	8007b20 <CAN_Rx+0x140>
	{
		frame->data[i + 4] = (CAN1->sFIFOMailBox[fifo].RDHR)>>(i<<3);
 8007af8:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <CAN_Rx+0x178>)
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	00db      	lsls	r3, r3, #3
 8007b0a:	40da      	lsrs	r2, r3
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	b2d1      	uxtb	r1, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	4413      	add	r3, r2
 8007b16:	460a      	mov	r2, r1
 8007b18:	71da      	strb	r2, [r3, #7]
	for(u8 i = 0; i < 4; i++)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	73bb      	strb	r3, [r7, #14]
 8007b20:	7bbb      	ldrb	r3, [r7, #14]
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d9e8      	bls.n	8007af8 <CAN_Rx+0x118>
	}


	/* release FIFO (pop first message) */
	switch(fifo)
 8007b26:	78fb      	ldrb	r3, [r7, #3]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <CAN_Rx+0x152>
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d007      	beq.n	8007b40 <CAN_Rx+0x160>

		case FIFO_1:
			SET_BIT(CAN1->RF1R, 5);
		break;
	}
}
 8007b30:	e00d      	b.n	8007b4e <CAN_Rx+0x16e>
			SET_BIT(CAN1->RF0R, 5);
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <CAN_Rx+0x178>)
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	4a08      	ldr	r2, [pc, #32]	; (8007b58 <CAN_Rx+0x178>)
 8007b38:	f043 0320 	orr.w	r3, r3, #32
 8007b3c:	60d3      	str	r3, [r2, #12]
		break;
 8007b3e:	e006      	b.n	8007b4e <CAN_Rx+0x16e>
			SET_BIT(CAN1->RF1R, 5);
 8007b40:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <CAN_Rx+0x178>)
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	4a04      	ldr	r2, [pc, #16]	; (8007b58 <CAN_Rx+0x178>)
 8007b46:	f043 0320 	orr.w	r3, r3, #32
 8007b4a:	6113      	str	r3, [r2, #16]
		break;
 8007b4c:	bf00      	nop
}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bc80      	pop	{r7}
 8007b56:	4770      	bx	lr
 8007b58:	40006400 	.word	0x40006400

08007b5c <ECU_ConfigActivateBoot>:
#include "ECU_Config.h"


void  ECU_ConfigActivateBoot(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
	FPEC_InitFlash();
 8007b60:	f000 f8a6 	bl	8007cb0 <FPEC_InitFlash>
	FPEC_WriteByte(BRANCHING_PAGE_NUMBER, BRANCHING_BYTE_OFFSET, BOOTLOADER);
 8007b64:	2242      	movs	r2, #66	; 0x42
 8007b66:	2100      	movs	r1, #0
 8007b68:	2005      	movs	r0, #5
 8007b6a:	f000 f985 	bl	8007e78 <FPEC_WriteByte>
}
 8007b6e:	bf00      	nop
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <FPEC_UnlockFlash>:
  * @brief  Unlock the Embedded Flash.
  * @param  None.
  * @retval None.
  */
static void  FPEC_UnlockFlash(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
	FLASH->KEYR = KEY1;  //write KEY1
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <FPEC_UnlockFlash+0x18>)
 8007b7a:	4a05      	ldr	r2, [pc, #20]	; (8007b90 <FPEC_UnlockFlash+0x1c>)
 8007b7c:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = KEY2;  //write KEY2
 8007b7e:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <FPEC_UnlockFlash+0x18>)
 8007b80:	4a04      	ldr	r2, [pc, #16]	; (8007b94 <FPEC_UnlockFlash+0x20>)
 8007b82:	605a      	str	r2, [r3, #4]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	40022000 	.word	0x40022000
 8007b90:	45670123 	.word	0x45670123
 8007b94:	cdef89ab 	.word	0xcdef89ab

08007b98 <FPEC_LockFlash>:
  * @brief  Lock the Embedded Flash.
  * @param  None.
  * @retval None.
  */
static void  FPEC_LockFlash(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
	SET_BIT(FLASH->CR, 7);
 8007b9c:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <FPEC_LockFlash+0x18>)
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	4a03      	ldr	r2, [pc, #12]	; (8007bb0 <FPEC_LockFlash+0x18>)
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba6:	6113      	str	r3, [r2, #16]
}
 8007ba8:	bf00      	nop
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bc80      	pop	{r7}
 8007bae:	4770      	bx	lr
 8007bb0:	40022000 	.word	0x40022000

08007bb4 <FPEC_CheckErrors>:
  * @brief  Check if any errors occurred while programming/erasing flash
  * @param  None
  * @retval Flash error
  */
static FPEC_Error_t  FPEC_CheckErrors(void)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
	if(GET_BIT(FLASH->SR, 4) == 1)
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <FPEC_CheckErrors+0x4c>)
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	091b      	lsrs	r3, r3, #4
 8007bbe:	f003 0301 	and.w	r3, r3, #1
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d107      	bne.n	8007bd6 <FPEC_CheckErrors+0x22>
	{
		SET_BIT(FLASH->SR, 4);  //clear flag
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <FPEC_CheckErrors+0x4c>)
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <FPEC_CheckErrors+0x4c>)
 8007bcc:	f043 0310 	orr.w	r3, r3, #16
 8007bd0:	60d3      	str	r3, [r2, #12]
		return  FPEC_WRITE_PROTECTION_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e00f      	b.n	8007bf6 <FPEC_CheckErrors+0x42>
	}
	if(GET_BIT(FLASH->SR, 2) == 1)
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <FPEC_CheckErrors+0x4c>)
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	089b      	lsrs	r3, r3, #2
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d107      	bne.n	8007bf4 <FPEC_CheckErrors+0x40>
	{
		SET_BIT(FLASH->SR, 2);  //clear flag
 8007be4:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <FPEC_CheckErrors+0x4c>)
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	4a05      	ldr	r2, [pc, #20]	; (8007c00 <FPEC_CheckErrors+0x4c>)
 8007bea:	f043 0304 	orr.w	r3, r3, #4
 8007bee:	60d3      	str	r3, [r2, #12]
		return  FPEC_PROGRAMMING_ERROR;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	e000      	b.n	8007bf6 <FPEC_CheckErrors+0x42>
	}
	return FPEC_NO_ERRORS;
 8007bf4:	2302      	movs	r3, #2
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40022000 	.word	0x40022000

08007c04 <FPEC_DirectWriteHalfWord>:
  * @note   offsetAddress must be even number
  * @param  data: actual data you want to write.
  * @retval Flash error
  */
FPEC_Error_t  FPEC_DirectWriteHalfWord(u8 pageNumber, u16 offsetAddress, u16 data)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	80bb      	strh	r3, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	807b      	strh	r3, [r7, #2]
	if(offsetAddress % 2 == 1)	return FPEC_PROGRAMMING_ERROR;
 8007c16:	88bb      	ldrh	r3, [r7, #4]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <FPEC_DirectWriteHalfWord+0x22>
 8007c22:	2300      	movs	r3, #0
 8007c24:	e03d      	b.n	8007ca2 <FPEC_DirectWriteHalfWord+0x9e>

	FPEC_Error_t writeStatus = FPEC_NO_ERRORS;
 8007c26:	2302      	movs	r3, #2
 8007c28:	73fb      	strb	r3, [r7, #15]

	FPEC_UnlockFlash();
 8007c2a:	f7ff ffa3 	bl	8007b74 <FPEC_UnlockFlash>

	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8007c2e:	bf00      	nop
 8007c30:	4b1e      	ldr	r3, [pc, #120]	; (8007cac <FPEC_DirectWriteHalfWord+0xa8>)
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d0f9      	beq.n	8007c30 <FPEC_DirectWriteHalfWord+0x2c>

	SET_BIT(FLASH->CR, 0);   //Set bit 0 to select flash programming
 8007c3c:	4b1b      	ldr	r3, [pc, #108]	; (8007cac <FPEC_DirectWriteHalfWord+0xa8>)
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	4a1a      	ldr	r2, [pc, #104]	; (8007cac <FPEC_DirectWriteHalfWord+0xa8>)
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6113      	str	r3, [r2, #16]

	/* Get physical address of the desired half word */
	volatile u16* physicalAddress = (volatile u16*)(FLASH_BASE_ADDRESS + pageNumber * PAGE_SIZE_BYTES + offsetAddress);
 8007c48:	79fb      	ldrb	r3, [r7, #7]
 8007c4a:	029b      	lsls	r3, r3, #10
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	88bb      	ldrh	r3, [r7, #4]
 8007c50:	4413      	add	r3, r2
 8007c52:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8007c56:	60bb      	str	r3, [r7, #8]
	*physicalAddress = data;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	801a      	strh	r2, [r3, #0]

	/* Wait until writing is completed */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8007c5e:	bf00      	nop
 8007c60:	4b12      	ldr	r3, [pc, #72]	; (8007cac <FPEC_DirectWriteHalfWord+0xa8>)
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d0f9      	beq.n	8007c60 <FPEC_DirectWriteHalfWord+0x5c>

	CLR_BIT(FLASH->CR, 0);   //clear bit 0 to unselect flash programming
 8007c6c:	4b0f      	ldr	r3, [pc, #60]	; (8007cac <FPEC_DirectWriteHalfWord+0xa8>)
 8007c6e:	691b      	ldr	r3, [r3, #16]
 8007c70:	4a0e      	ldr	r2, [pc, #56]	; (8007cac <FPEC_DirectWriteHalfWord+0xa8>)
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	6113      	str	r3, [r2, #16]

	/* Read the written half word to make sure it's written successfully */
	if(FPEC_ReadHalfWord(pageNumber, offsetAddress) == data)
 8007c78:	88ba      	ldrh	r2, [r7, #4]
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f8d8 	bl	8007e34 <FPEC_ReadHalfWord>
 8007c84:	4603      	mov	r3, r0
 8007c86:	461a      	mov	r2, r3
 8007c88:	887b      	ldrh	r3, [r7, #2]
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d102      	bne.n	8007c94 <FPEC_DirectWriteHalfWord+0x90>
	{
		writeStatus = FPEC_NO_ERRORS;
 8007c8e:	2302      	movs	r3, #2
 8007c90:	73fb      	strb	r3, [r7, #15]
 8007c92:	e003      	b.n	8007c9c <FPEC_DirectWriteHalfWord+0x98>
	}
	else
	{
		writeStatus =  FPEC_CheckErrors();
 8007c94:	f7ff ff8e 	bl	8007bb4 <FPEC_CheckErrors>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]
	}

	FPEC_LockFlash();
 8007c9c:	f7ff ff7c 	bl	8007b98 <FPEC_LockFlash>

	return writeStatus;
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	40022000 	.word	0x40022000

08007cb0 <FPEC_InitFlash>:
  * @note   This function must be called once before any reading, writing or erasing.
  * @param  None.
  * @retval Flash error.
  */
void  FPEC_InitFlash(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
	RCC_EnablePeripheralClock(FLITF_PERIPHERAL);
 8007cb4:	2004      	movs	r0, #4
 8007cb6:	f000 fb69 	bl	800838c <RCC_EnablePeripheralClock>
	FPEC_UnlockFlash();
 8007cba:	f7ff ff5b 	bl	8007b74 <FPEC_UnlockFlash>
#elif  SYSTEM_CLK  <=  48000000
	SET_BIT(FLASH->ACR, 0);
	CLR_BIT(FLASH->ACR, 1);
	CLR_BIT(FLASH->ACR, 2);
#elif  SYSTEM_CLK  <=  72000000
	CLR_BIT(FLASH->ACR, 0);
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <FPEC_InitFlash+0x3c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a0a      	ldr	r2, [pc, #40]	; (8007cec <FPEC_InitFlash+0x3c>)
 8007cc4:	f023 0301 	bic.w	r3, r3, #1
 8007cc8:	6013      	str	r3, [r2, #0]
	SET_BIT(FLASH->ACR, 1);
 8007cca:	4b08      	ldr	r3, [pc, #32]	; (8007cec <FPEC_InitFlash+0x3c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a07      	ldr	r2, [pc, #28]	; (8007cec <FPEC_InitFlash+0x3c>)
 8007cd0:	f043 0302 	orr.w	r3, r3, #2
 8007cd4:	6013      	str	r3, [r2, #0]
	CLR_BIT(FLASH->ACR, 2);
 8007cd6:	4b05      	ldr	r3, [pc, #20]	; (8007cec <FPEC_InitFlash+0x3c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a04      	ldr	r2, [pc, #16]	; (8007cec <FPEC_InitFlash+0x3c>)
 8007cdc:	f023 0304 	bic.w	r3, r3, #4
 8007ce0:	6013      	str	r3, [r2, #0]
#endif

	FPEC_LockFlash();
 8007ce2:	f7ff ff59 	bl	8007b98 <FPEC_LockFlash>
}
 8007ce6:	bf00      	nop
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	40022000 	.word	0x40022000

08007cf0 <FPEC_ErasePage>:
  * @param  pageNumber: number of the page to be erased.
  * @note   There are 128 pages in the flash memory (from page 0 to page 127)
  * @retval Flash error
  */
FPEC_Error_t  FPEC_ErasePage(u8 pageNumber)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
	FPEC_Error_t  eraseStatus;

	FPEC_UnlockFlash();
 8007cfa:	f7ff ff3b 	bl	8007b74 <FPEC_UnlockFlash>

	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8007cfe:	bf00      	nop
 8007d00:	4b1f      	ldr	r3, [pc, #124]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d0f9      	beq.n	8007d00 <FPEC_ErasePage+0x10>

	SET_BIT(FLASH->CR, 1);   //Set bit 1 to select page erase
 8007d0c:	4b1c      	ldr	r3, [pc, #112]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	4a1b      	ldr	r2, [pc, #108]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d12:	f043 0302 	orr.w	r3, r3, #2
 8007d16:	6113      	str	r3, [r2, #16]

	/* Get address of first byte in the desired page to be erased */
	u32 pagePhysicalAddress = FLASH_BASE_ADDRESS + pageNumber * PAGE_SIZE_BYTES;
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	029b      	lsls	r3, r3, #10
 8007d1c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8007d20:	60bb      	str	r3, [r7, #8]
	FLASH->AR = pagePhysicalAddress;
 8007d22:	4a17      	ldr	r2, [pc, #92]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	6153      	str	r3, [r2, #20]

	SET_BIT(FLASH->CR, 6);   //Start erasing the page
 8007d28:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d2a:	691b      	ldr	r3, [r3, #16]
 8007d2c:	4a14      	ldr	r2, [pc, #80]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d32:	6113      	str	r3, [r2, #16]

	/* wait until page erasing is completed */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8007d34:	bf00      	nop
 8007d36:	4b12      	ldr	r3, [pc, #72]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d0f9      	beq.n	8007d36 <FPEC_ErasePage+0x46>

	CLR_BIT(FLASH->CR, 1);   //Clear bit 1 to unselect page erase
 8007d42:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	4a0e      	ldr	r2, [pc, #56]	; (8007d80 <FPEC_ErasePage+0x90>)
 8007d48:	f023 0302 	bic.w	r3, r3, #2
 8007d4c:	6113      	str	r3, [r2, #16]

	/* read first half word of this page to make sure it's erased successfully */
	if(FPEC_ReadHalfWord(pageNumber, 0) == 0xFFFF)
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	2100      	movs	r1, #0
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f86e 	bl	8007e34 <FPEC_ReadHalfWord>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d102      	bne.n	8007d6a <FPEC_ErasePage+0x7a>
	{
		eraseStatus = FPEC_NO_ERRORS;
 8007d64:	2302      	movs	r3, #2
 8007d66:	73fb      	strb	r3, [r7, #15]
 8007d68:	e003      	b.n	8007d72 <FPEC_ErasePage+0x82>
	}
	else
	{
		eraseStatus = FPEC_CheckErrors();
 8007d6a:	f7ff ff23 	bl	8007bb4 <FPEC_CheckErrors>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
	}

	FPEC_LockFlash();
 8007d72:	f7ff ff11 	bl	8007b98 <FPEC_LockFlash>

	return eraseStatus;
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	40022000 	.word	0x40022000

08007d84 <FPEC_WritePage>:
  * @param  pageNumber: number of the page where you want to write.
  * @param  data: array that contains actual data you want to write.
  * @retval Flash error.
  */
FPEC_Error_t  FPEC_WritePage(u8 pageNumber, u16* data)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6039      	str	r1, [r7, #0]
 8007d8e:	71fb      	strb	r3, [r7, #7]
	FPEC_Error_t writeStatus = FPEC_NO_ERRORS;
 8007d90:	2302      	movs	r3, #2
 8007d92:	73fb      	strb	r3, [r7, #15]

	FPEC_UnlockFlash();
 8007d94:	f7ff feee 	bl	8007b74 <FPEC_UnlockFlash>

	/* To write on a page, it must be erased first */
	writeStatus = FPEC_ErasePage(pageNumber);
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff ffa8 	bl	8007cf0 <FPEC_ErasePage>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]

	/* Write the data on the page by half word at a time */
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	81bb      	strh	r3, [r7, #12]
 8007da8:	e014      	b.n	8007dd4 <FPEC_WritePage+0x50>
	{
		u16 offsetAddress = i * HALF_WORD_SIZE;
 8007daa:	89bb      	ldrh	r3, [r7, #12]
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	817b      	strh	r3, [r7, #10]
		writeStatus = FPEC_DirectWriteHalfWord(pageNumber, offsetAddress, data[i]);
 8007db0:	89bb      	ldrh	r3, [r7, #12]
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	4413      	add	r3, r2
 8007db8:	881a      	ldrh	r2, [r3, #0]
 8007dba:	8979      	ldrh	r1, [r7, #10]
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff ff20 	bl	8007c04 <FPEC_DirectWriteHalfWord>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]

		/* If there were errors while writing, don't continue writing */
		if(writeStatus != FPEC_NO_ERRORS)		break;
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d107      	bne.n	8007dde <FPEC_WritePage+0x5a>
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 8007dce:	89bb      	ldrh	r3, [r7, #12]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	81bb      	strh	r3, [r7, #12]
 8007dd4:	89bb      	ldrh	r3, [r7, #12]
 8007dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dda:	d3e6      	bcc.n	8007daa <FPEC_WritePage+0x26>
 8007ddc:	e000      	b.n	8007de0 <FPEC_WritePage+0x5c>
		if(writeStatus != FPEC_NO_ERRORS)		break;
 8007dde:	bf00      	nop
	}

	FPEC_LockFlash();
 8007de0:	f7ff feda 	bl	8007b98 <FPEC_LockFlash>

	return writeStatus;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <FPEC_ReadPage>:
  * @param  pageNumber: number of the page you want to read.
  * @param  data: the function will fill this array with the data stored in the desired page.
  * @retval Flash error.
  */
void  FPEC_ReadPage(u8 pageNumber, u16* data)
{
 8007dee:	b590      	push	{r4, r7, lr}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	4603      	mov	r3, r0
 8007df6:	6039      	str	r1, [r7, #0]
 8007df8:	71fb      	strb	r3, [r7, #7]
	/* Read the whole page by reading half word at a time */
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	81fb      	strh	r3, [r7, #14]
 8007dfe:	e011      	b.n	8007e24 <FPEC_ReadPage+0x36>
	{
		u16 offsetAddress = i * HALF_WORD_SIZE;
 8007e00:	89fb      	ldrh	r3, [r7, #14]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	81bb      	strh	r3, [r7, #12]
		data[i] = FPEC_ReadHalfWord(pageNumber, offsetAddress);
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	18d4      	adds	r4, r2, r3
 8007e0e:	89ba      	ldrh	r2, [r7, #12]
 8007e10:	79fb      	ldrb	r3, [r7, #7]
 8007e12:	4611      	mov	r1, r2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 f80d 	bl	8007e34 <FPEC_ReadHalfWord>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	8023      	strh	r3, [r4, #0]
	for(u16 i=0; i<PAGE_SIZE_HALF_WORDS; i++)
 8007e1e:	89fb      	ldrh	r3, [r7, #14]
 8007e20:	3301      	adds	r3, #1
 8007e22:	81fb      	strh	r3, [r7, #14]
 8007e24:	89fb      	ldrh	r3, [r7, #14]
 8007e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e2a:	d3e9      	bcc.n	8007e00 <FPEC_ReadPage+0x12>
	}
}
 8007e2c:	bf00      	nop
 8007e2e:	3714      	adds	r7, #20
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd90      	pop	{r4, r7, pc}

08007e34 <FPEC_ReadHalfWord>:
  * @param  offsetAddress: offset address of the half word you want to read.
  * @param  data: the function will fill this array with the data stored in the desired page.
  * @retval data stored in the desired half word.
  */
u16  FPEC_ReadHalfWord(u8 pageNumber, u16 offsetAddress)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	460a      	mov	r2, r1
 8007e3e:	71fb      	strb	r3, [r7, #7]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80bb      	strh	r3, [r7, #4]
	/* Wait if the flash is busy */
	while(GET_BIT(FLASH->SR, 0) == 1) {}
 8007e44:	bf00      	nop
 8007e46:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <FPEC_ReadHalfWord+0x40>)
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d0f9      	beq.n	8007e46 <FPEC_ReadHalfWord+0x12>

	/* Get physical address of the desired half word */
	volatile u16* physicalAddress = (volatile u16*)(FLASH_BASE_ADDRESS + pageNumber * PAGE_SIZE_BYTES + offsetAddress);
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	029b      	lsls	r3, r3, #10
 8007e56:	461a      	mov	r2, r3
 8007e58:	88bb      	ldrh	r3, [r7, #4]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8007e60:	60fb      	str	r3, [r7, #12]

	/* Read data from this physical address */
	return *physicalAddress;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29b      	uxth	r3, r3
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40022000 	.word	0x40022000

08007e78 <FPEC_WriteByte>:
  * @param  offsetAddress: offset address of the half word you want to write.
  * @param  data: actual data you want to write.
  * @retval Flash error.
  */
FPEC_Error_t  FPEC_WriteByte(u8 pageNumber, u16 offsetAddress, u8 data)
{
 8007e78:	b590      	push	{r4, r7, lr}
 8007e7a:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	4604      	mov	r4, r0
 8007e82:	4608      	mov	r0, r1
 8007e84:	4611      	mov	r1, r2
 8007e86:	1dfb      	adds	r3, r7, #7
 8007e88:	4622      	mov	r2, r4
 8007e8a:	701a      	strb	r2, [r3, #0]
 8007e8c:	1d3b      	adds	r3, r7, #4
 8007e8e:	4602      	mov	r2, r0
 8007e90:	801a      	strh	r2, [r3, #0]
 8007e92:	1dbb      	adds	r3, r7, #6
 8007e94:	460a      	mov	r2, r1
 8007e96:	701a      	strb	r2, [r3, #0]
	/* Read the content of the desired page */
	u16 pageData[PAGE_SIZE_HALF_WORDS];
	FPEC_ReadPage(pageNumber, pageData);
 8007e98:	f107 020c 	add.w	r2, r7, #12
 8007e9c:	1dfb      	adds	r3, r7, #7
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff ffa3 	bl	8007dee <FPEC_ReadPage>

	/* modify the desired byte */
	u16 originalhalfWord = pageData[offsetAddress/2];
 8007ea8:	1d3b      	adds	r3, r7, #4
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f107 030c 	add.w	r3, r7, #12
 8007eb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007eba:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	if(offsetAddress % 2 == 0)
 8007ebe:	1d3b      	adds	r3, r7, #4
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10e      	bne.n	8007eea <FPEC_WriteByte+0x72>
	{
		originalhalfWord &= 0xFF00;
 8007ecc:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8007ed0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ed4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		originalhalfWord |= data;
 8007ed8:	1dbb      	adds	r3, r7, #6
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
 8007ee8:	e00e      	b.n	8007f08 <FPEC_WriteByte+0x90>
	}
	else
	{
		originalhalfWord &= 0x00FF;
 8007eea:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
		originalhalfWord |= (((u16)data)<<8);
 8007ef4:	1dbb      	adds	r3, r7, #6
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	b21a      	sxth	r2, r3
 8007efc:	f9b7 340e 	ldrsh.w	r3, [r7, #1038]	; 0x40e
 8007f00:	4313      	orrs	r3, r2
 8007f02:	b21b      	sxth	r3, r3
 8007f04:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	}
	pageData[offsetAddress/2] = originalhalfWord;
 8007f08:	1d3b      	adds	r3, r7, #4
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	085b      	lsrs	r3, r3, #1
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	4619      	mov	r1, r3
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8007f1a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]

	/* Erase page */
	FPEC_Error_t eraseStatus = FPEC_ErasePage(pageNumber);
 8007f1e:	1dfb      	adds	r3, r7, #7
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fee4 	bl	8007cf0 <FPEC_ErasePage>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f887 340d 	strb.w	r3, [r7, #1037]	; 0x40d
	if(eraseStatus != FPEC_NO_ERRORS)
 8007f2e:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d002      	beq.n	8007f3c <FPEC_WriteByte+0xc4>
	{
		return eraseStatus;
 8007f36:	f897 340d 	ldrb.w	r3, [r7, #1037]	; 0x40d
 8007f3a:	e012      	b.n	8007f62 <FPEC_WriteByte+0xea>
	}

	/* Rewrite the page again after modifications */
	FPEC_Error_t writeStatus = FPEC_WritePage(pageNumber, pageData);
 8007f3c:	f107 020c 	add.w	r2, r7, #12
 8007f40:	1dfb      	adds	r3, r7, #7
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff ff1c 	bl	8007d84 <FPEC_WritePage>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 340c 	strb.w	r3, [r7, #1036]	; 0x40c
	if(writeStatus != FPEC_NO_ERRORS)
 8007f52:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d002      	beq.n	8007f60 <FPEC_WriteByte+0xe8>
	{
		return writeStatus;
 8007f5a:	f897 340c 	ldrb.w	r3, [r7, #1036]	; 0x40c
 8007f5e:	e000      	b.n	8007f62 <FPEC_WriteByte+0xea>
	}

	return FPEC_NO_ERRORS;
 8007f60:	2302      	movs	r3, #2
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd90      	pop	{r4, r7, pc}

08007f6c <GPIO_InitPin>:




static void  GPIO_InitPin(GPIO_Pin_t* pin, const GPIO_PinConfg_t* pinConfg)
{
 8007f6c:	b590      	push	{r4, r7, lr}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	if(pin->pinNumber < 8)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	885b      	ldrh	r3, [r3, #2]
 8007f7a:	2b07      	cmp	r3, #7
 8007f7c:	d813      	bhi.n	8007fa6 <GPIO_InitPin+0x3a>
	{
		GPIO[pin->port]->CRL = GPIO_GetNewValueOfCR(pin, pinConfg, GPIO[pin->port]->CRL);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	4b2d      	ldr	r3, [pc, #180]	; (800803c <GPIO_InitPin+0xd0>)
 8007f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	4619      	mov	r1, r3
 8007f92:	4b2a      	ldr	r3, [pc, #168]	; (800803c <GPIO_InitPin+0xd0>)
 8007f94:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f850 	bl	8008040 <GPIO_GetNewValueOfCR>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	6023      	str	r3, [r4, #0]
 8007fa4:	e022      	b.n	8007fec <GPIO_InitPin+0x80>
	}
	else if(pin->pinNumber < 16)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	885b      	ldrh	r3, [r3, #2]
 8007faa:	2b0f      	cmp	r3, #15
 8007fac:	d81e      	bhi.n	8007fec <GPIO_InitPin+0x80>
	{
		pin->pinNumber -= 8;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	885b      	ldrh	r3, [r3, #2]
 8007fb2:	3b08      	subs	r3, #8
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	805a      	strh	r2, [r3, #2]
		GPIO[pin->port]->CRH = GPIO_GetNewValueOfCR(pin, pinConfg, GPIO[pin->port]->CRH);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	4b1e      	ldr	r3, [pc, #120]	; (800803c <GPIO_InitPin+0xd0>)
 8007fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4b1b      	ldr	r3, [pc, #108]	; (800803c <GPIO_InitPin+0xd0>)
 8007fd0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f832 	bl	8008040 <GPIO_GetNewValueOfCR>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	6063      	str	r3, [r4, #4]
		pin->pinNumber += 8;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	885b      	ldrh	r3, [r3, #2]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	805a      	strh	r2, [r3, #2]
	}

	switch(pinConfg->pinMode)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d002      	beq.n	8007ffa <GPIO_InitPin+0x8e>
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d00e      	beq.n	8008016 <GPIO_InitPin+0xaa>
			break;
		case INPUT_PULL_DOWN:
			GPIO[pin->port]->BRR  = 1<<(pin->pinNumber);
			break;
		default:
			break;
 8007ff8:	e01b      	b.n	8008032 <GPIO_InitPin+0xc6>
			GPIO[pin->port]->BSRR = 1<<(pin->pinNumber);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	885b      	ldrh	r3, [r3, #2]
 8007ffe:	461a      	mov	r2, r3
 8008000:	2301      	movs	r3, #1
 8008002:	fa03 f202 	lsl.w	r2, r3, r2
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	4b0b      	ldr	r3, [pc, #44]	; (800803c <GPIO_InitPin+0xd0>)
 800800e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008012:	611a      	str	r2, [r3, #16]
			break;
 8008014:	e00d      	b.n	8008032 <GPIO_InitPin+0xc6>
			GPIO[pin->port]->BRR  = 1<<(pin->pinNumber);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	885b      	ldrh	r3, [r3, #2]
 800801a:	461a      	mov	r2, r3
 800801c:	2301      	movs	r3, #1
 800801e:	fa03 f202 	lsl.w	r2, r3, r2
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	4619      	mov	r1, r3
 8008028:	4b04      	ldr	r3, [pc, #16]	; (800803c <GPIO_InitPin+0xd0>)
 800802a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800802e:	615a      	str	r2, [r3, #20]
			break;
 8008030:	bf00      	nop
	}
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	bf00      	nop
 800803c:	20000000 	.word	0x20000000

08008040 <GPIO_GetNewValueOfCR>:




static u32   GPIO_GetNewValueOfCR(GPIO_Pin_t* pin, const GPIO_PinConfg_t* pinConfg, u32 oldValueOfCR)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
	u32 CRValue = oldValueOfCR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	617b      	str	r3, [r7, #20]

	/* Clear corresponding two MODE bits and two CNF bits */
	CRValue &= ~(0xFUL<<(4*(pin->pinNumber))) ;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	885b      	ldrh	r3, [r3, #2]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	220f      	movs	r2, #15
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	43db      	mvns	r3, r3
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4013      	ands	r3, r2
 8008062:	617b      	str	r3, [r7, #20]


	switch (pinConfg->pinMode)
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b07      	cmp	r3, #7
 800806a:	d833      	bhi.n	80080d4 <GPIO_GetNewValueOfCR+0x94>
 800806c:	a201      	add	r2, pc, #4	; (adr r2, 8008074 <GPIO_GetNewValueOfCR+0x34>)
 800806e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008072:	bf00      	nop
 8008074:	080080d5 	.word	0x080080d5
 8008078:	08008095 	.word	0x08008095
 800807c:	080080bf 	.word	0x080080bf
 8008080:	080080bf 	.word	0x080080bf
 8008084:	08008095 	.word	0x08008095
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080bf 	.word	0x080080bf
 8008090:	080080ab 	.word	0x080080ab
			/* Nothing to do here */
			break;

		case INPUT_FLOATING:
		case GENERAL_PURPOSE_OUTPUT_OPEN_DRAIN:
			SET_BIT(CRValue, 4*(pin->pinNumber)+2);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	885b      	ldrh	r3, [r3, #2]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	3302      	adds	r3, #2
 800809c:	2201      	movs	r2, #1
 800809e:	fa02 f303 	lsl.w	r3, r2, r3
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	617b      	str	r3, [r7, #20]
			break;
 80080a8:	e015      	b.n	80080d6 <GPIO_GetNewValueOfCR+0x96>

		case ALTERNATE_FUNCTION_OUTPUT_OPEN_DRAIN:
			SET_BIT(CRValue, 4*(pin->pinNumber)+2);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	885b      	ldrh	r3, [r3, #2]
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	3302      	adds	r3, #2
 80080b2:	2201      	movs	r2, #1
 80080b4:	fa02 f303 	lsl.w	r3, r2, r3
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]

		case INPUT_PULL_UP:
		case INPUT_PULL_DOWN:
		case ALTERNATE_FUNCTION_OUTPUT_PUSH_PULL:
			SET_BIT(CRValue, 4*(pin->pinNumber)+3);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	885b      	ldrh	r3, [r3, #2]
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	3303      	adds	r3, #3
 80080c6:	2201      	movs	r2, #1
 80080c8:	fa02 f303 	lsl.w	r3, r2, r3
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
			break;
 80080d2:	e000      	b.n	80080d6 <GPIO_GetNewValueOfCR+0x96>

		default:
			break;
 80080d4:	bf00      	nop
	}

	switch(pinConfg->pinMode)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	3b04      	subs	r3, #4
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d827      	bhi.n	8008130 <GPIO_GetNewValueOfCR+0xf0>
	{
		case GENERAL_PURPOSE_OUTPUT_OPEN_DRAIN ... ALTERNATE_FUNCTION_OUTPUT_OPEN_DRAIN:
			switch (pinConfg->outputSpeed)
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d017      	beq.n	8008118 <GPIO_GetNewValueOfCR+0xd8>
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d00c      	beq.n	8008106 <GPIO_GetNewValueOfCR+0xc6>
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d000      	beq.n	80080f2 <GPIO_GetNewValueOfCR+0xb2>
				case OUTPUT_SPEED_2MHz:
					SET_BIT(CRValue, 4*(pin->pinNumber)+1);
					break;

				default:
					break;
 80080f0:	e01d      	b.n	800812e <GPIO_GetNewValueOfCR+0xee>
					SET_BIT(CRValue, 4*(pin->pinNumber));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	885b      	ldrh	r3, [r3, #2]
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	2201      	movs	r2, #1
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
					break;
 8008104:	e013      	b.n	800812e <GPIO_GetNewValueOfCR+0xee>
					SET_BIT(CRValue, 4*(pin->pinNumber));
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	885b      	ldrh	r3, [r3, #2]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	2201      	movs	r2, #1
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
					SET_BIT(CRValue, 4*(pin->pinNumber)+1);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	885b      	ldrh	r3, [r3, #2]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	3301      	adds	r3, #1
 8008120:	2201      	movs	r2, #1
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4313      	orrs	r3, r2
 800812a:	617b      	str	r3, [r7, #20]
					break;
 800812c:	bf00      	nop
			}
			break;
 800812e:	e000      	b.n	8008132 <GPIO_GetNewValueOfCR+0xf2>

		default:
			break;
 8008130:	bf00      	nop
	}

	return CRValue;
 8008132:	697b      	ldr	r3, [r7, #20]
}
 8008134:	4618      	mov	r0, r3
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	bc80      	pop	{r7}
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <GPIO_InitPins>:




void  GPIO_InitPins(const GPIO_Pin_t* groupOfPins, const GPIO_PinConfg_t* pinConfg)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
	GPIO_Pin_t pin;
	pin.port = groupOfPins->port;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	723b      	strb	r3, [r7, #8]

	switch(pin.port)
 8008150:	7a3b      	ldrb	r3, [r7, #8]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d007      	beq.n	8008166 <GPIO_InitPins+0x26>
 8008156:	2b02      	cmp	r3, #2
 8008158:	d009      	beq.n	800816e <GPIO_InitPins+0x2e>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10b      	bne.n	8008176 <GPIO_InitPins+0x36>
	{
		case GPIO_PORTA:
			RCC_EnablePeripheralClock(GPIOA_PERIPHERAL);
 800815e:	2042      	movs	r0, #66	; 0x42
 8008160:	f000 f914 	bl	800838c <RCC_EnablePeripheralClock>
			break;
 8008164:	e007      	b.n	8008176 <GPIO_InitPins+0x36>

		case GPIO_PORTB:
			RCC_EnablePeripheralClock(GPIOB_PERIPHERAL);
 8008166:	2043      	movs	r0, #67	; 0x43
 8008168:	f000 f910 	bl	800838c <RCC_EnablePeripheralClock>
			break;
 800816c:	e003      	b.n	8008176 <GPIO_InitPins+0x36>

		case GPIO_PORTC:
			RCC_EnablePeripheralClock(GPIOC_PERIPHERAL);
 800816e:	2044      	movs	r0, #68	; 0x44
 8008170:	f000 f90c 	bl	800838c <RCC_EnablePeripheralClock>
			break;
 8008174:	bf00      	nop
	}


	for(u8 pinNumCounter = 0; pinNumCounter < 16; pinNumCounter++)
 8008176:	2300      	movs	r3, #0
 8008178:	73fb      	strb	r3, [r7, #15]
 800817a:	e015      	b.n	80081a8 <GPIO_InitPins+0x68>
	{
		if(GET_BIT(groupOfPins->pinNumber, pinNumCounter) == 0)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	885b      	ldrh	r3, [r3, #2]
 8008180:	461a      	mov	r2, r3
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	fa42 f303 	asr.w	r3, r2, r3
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d108      	bne.n	80081a2 <GPIO_InitPins+0x62>
		{
			pin.pinNumber = pinNumCounter;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	b29b      	uxth	r3, r3
 8008194:	817b      	strh	r3, [r7, #10]
			GPIO_InitPin(&pin, pinConfg);
 8008196:	f107 0308 	add.w	r3, r7, #8
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff fee5 	bl	8007f6c <GPIO_InitPin>
	for(u8 pinNumCounter = 0; pinNumCounter < 16; pinNumCounter++)
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	3301      	adds	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	2b0f      	cmp	r3, #15
 80081ac:	d9e6      	bls.n	800817c <GPIO_InitPins+0x3c>
		}
	}
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <GPIO_SetPinsOutputVoltage>:




void  GPIO_SetPinsOutputVoltage(const GPIO_Pin_t* groupOfPins, GPIO_PinLevel_t pinLevel)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
	switch(pinLevel)
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <GPIO_SetPinsOutputVoltage+0x18>
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d00b      	beq.n	80081e6 <GPIO_SetPinsOutputVoltage+0x2e>
			break;
		case GPIO_HIGH:
			GPIO[groupOfPins->port]->BRR  = ~(groupOfPins->pinNumber);
			break;
		default:
			break;
 80081ce:	e015      	b.n	80081fc <GPIO_SetPinsOutputVoltage+0x44>
			GPIO[groupOfPins->port]->BSRR = ~(groupOfPins->pinNumber);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	885b      	ldrh	r3, [r3, #2]
 80081d4:	43da      	mvns	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	4619      	mov	r1, r3
 80081dc:	4b0a      	ldr	r3, [pc, #40]	; (8008208 <GPIO_SetPinsOutputVoltage+0x50>)
 80081de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081e2:	611a      	str	r2, [r3, #16]
			break;
 80081e4:	e00a      	b.n	80081fc <GPIO_SetPinsOutputVoltage+0x44>
			GPIO[groupOfPins->port]->BRR  = ~(groupOfPins->pinNumber);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	885b      	ldrh	r3, [r3, #2]
 80081ea:	43da      	mvns	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	4619      	mov	r1, r3
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <GPIO_SetPinsOutputVoltage+0x50>)
 80081f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80081f8:	615a      	str	r2, [r3, #20]
			break;
 80081fa:	bf00      	nop
	}
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20000000 	.word	0x20000000

0800820c <NVIC_EnableInterrupt>:

#include  "NVIC.h"


void  NVIC_EnableInterrupt(IRQn_Type IRQnID)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
	if(IRQnID >= 0)   //if IRQnID is an ID of Peripheral Interrupt not system exception
 8008216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800821a:	2b00      	cmp	r3, #0
 800821c:	db0d      	blt.n	800823a <NVIC_EnableInterrupt+0x2e>
	{
		NVIC->ISER[IRQnID>>5] = 1<<(IRQnID & 0x1F);
 800821e:	79fb      	ldrb	r3, [r7, #7]
 8008220:	f003 031f 	and.w	r3, r3, #31
 8008224:	2201      	movs	r2, #1
 8008226:	fa02 f103 	lsl.w	r1, r2, r3
 800822a:	4a13      	ldr	r2, [pc, #76]	; (8008278 <NVIC_EnableInterrupt+0x6c>)
 800822c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008230:	115b      	asrs	r3, r3, #5
 8008232:	b25b      	sxtb	r3, r3
 8008234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else if(IRQnID == MemoryManagement_IRQn || IRQnID == BusFault_IRQn || IRQnID == UsageFault_IRQn)
	{
		SET_BIT(SCB->SHCSR, IRQnID + 28);
	}
}
 8008238:	e019      	b.n	800826e <NVIC_EnableInterrupt+0x62>
	else if(IRQnID == MemoryManagement_IRQn || IRQnID == BusFault_IRQn || IRQnID == UsageFault_IRQn)
 800823a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823e:	f113 0f0c 	cmn.w	r3, #12
 8008242:	d009      	beq.n	8008258 <NVIC_EnableInterrupt+0x4c>
 8008244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008248:	f113 0f0b 	cmn.w	r3, #11
 800824c:	d004      	beq.n	8008258 <NVIC_EnableInterrupt+0x4c>
 800824e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008252:	f113 0f0a 	cmn.w	r3, #10
 8008256:	d10a      	bne.n	800826e <NVIC_EnableInterrupt+0x62>
		SET_BIT(SCB->SHCSR, IRQnID + 28);
 8008258:	4b08      	ldr	r3, [pc, #32]	; (800827c <NVIC_EnableInterrupt+0x70>)
 800825a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800825c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008260:	331c      	adds	r3, #28
 8008262:	2101      	movs	r1, #1
 8008264:	fa01 f303 	lsl.w	r3, r1, r3
 8008268:	4904      	ldr	r1, [pc, #16]	; (800827c <NVIC_EnableInterrupt+0x70>)
 800826a:	4313      	orrs	r3, r2
 800826c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	bc80      	pop	{r7}
 8008276:	4770      	bx	lr
 8008278:	e000e100 	.word	0xe000e100
 800827c:	e000ed00 	.word	0xe000ed00

08008280 <NVIC_ResetSystem>:




void  NVIC_ResetSystem(void)
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
	SCB->AIRCR = 0x05FA0004;
 8008284:	4b03      	ldr	r3, [pc, #12]	; (8008294 <NVIC_ResetSystem+0x14>)
 8008286:	4a04      	ldr	r2, [pc, #16]	; (8008298 <NVIC_ResetSystem+0x18>)
 8008288:	60da      	str	r2, [r3, #12]
}
 800828a:	bf00      	nop
 800828c:	46bd      	mov	sp, r7
 800828e:	bc80      	pop	{r7}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	e000ed00 	.word	0xe000ed00
 8008298:	05fa0004 	.word	0x05fa0004

0800829c <NVIC_MaskIRQs>:
	}
}


void  NVIC_MaskIRQs(u8 thresholdPriority)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
	__set_BASEPRI(thresholdPriority);
 80082a6:	79fb      	ldrb	r3, [r7, #7]
 80082a8:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	2301      	movs	r3, #1
 80082b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(1);
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr

080082c4 <NVIC_UnMaskIRQs>:


void  NVIC_UnMaskIRQs(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	2300      	movs	r3, #0
 80082cc:	607b      	str	r3, [r7, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f383 8810 	msr	PRIMASK, r3
	__set_PRIMASK(0);
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr
	...

080082e0 <RCC_InitClock>:
#include "RCC.h"

void  RCC_InitClock(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
	RCC->CR = 0x1;   //enable HSI
 80082e4:	4b28      	ldr	r3, [pc, #160]	; (8008388 <RCC_InitClock+0xa8>)
 80082e6:	2201      	movs	r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
	RCC->CFGR = 0;   //select HSI as system clock
 80082ea:	4b27      	ldr	r3, [pc, #156]	; (8008388 <RCC_InitClock+0xa8>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	605a      	str	r2, [r3, #4]
	RCC->CIR  = 0x9F0000;   //disable all RCC interrupts , clear all flags
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <RCC_InitClock+0xa8>)
 80082f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80082f6:	609a      	str	r2, [r3, #8]
	
	RCC_EnablePeripheralClock(FLITF_PERIPHERAL);
 80082f8:	2004      	movs	r0, #4
 80082fa:	f000 f847 	bl	800838c <RCC_EnablePeripheralClock>
	FPEC_InitFlash();
 80082fe:	f7ff fcd7 	bl	8007cb0 <FPEC_InitFlash>
	
	
	#if  APB1_DIVISION_FACTOR == 1
		/* do nothing, AHB division factor is already 1 */
	#elif  APB1_DIVISION_FACTOR == 2
		RCC->CFGR |= 0x400;
 8008302:	4b21      	ldr	r3, [pc, #132]	; (8008388 <RCC_InitClock+0xa8>)
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	4a20      	ldr	r2, [pc, #128]	; (8008388 <RCC_InitClock+0xa8>)
 8008308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800830c:	6053      	str	r3, [r2, #4]
	#endif
	
	

	#if  CLK_SECURITY_SYSTEM_STATE == ENABLED
		SET_BIT(RCC->CR, 19);
 800830e:	4b1e      	ldr	r3, [pc, #120]	; (8008388 <RCC_InitClock+0xa8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1d      	ldr	r2, [pc, #116]	; (8008388 <RCC_InitClock+0xa8>)
 8008314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008318:	6013      	str	r3, [r2, #0]
	#if  HSE_STATE == ENABLED
		#if  HSE_SRC == HSE_RC
			SET_BIT(RCC->CR, 18);  //select RC as HSE
		#endif
		
		SET_BIT(RCC->CR, 16);   //enable HSE
 800831a:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <RCC_InitClock+0xa8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <RCC_InitClock+0xa8>)
 8008320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008324:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->CR, 17) == 0);   //wait until HSE is ready
 8008326:	bf00      	nop
 8008328:	4b17      	ldr	r3, [pc, #92]	; (8008388 <RCC_InitClock+0xa8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	0c5b      	lsrs	r3, r3, #17
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f8      	beq.n	8008328 <RCC_InitClock+0x48>
	
	
	
	#if  PLL_STATE == ENABLED
		#if  PLL_SRC == HSE
			SET_BIT(RCC->CFGR, 16);   //select HSE as PLL input clock 
 8008336:	4b14      	ldr	r3, [pc, #80]	; (8008388 <RCC_InitClock+0xa8>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	4a13      	ldr	r2, [pc, #76]	; (8008388 <RCC_InitClock+0xa8>)
 800833c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008340:	6053      	str	r3, [r2, #4]
			SET_BIT(RCC->CFGR, 16);   //select HSE/2 as PLL input clock 
		#elif  PLL_SRC == HSI_DIVIDED_BY_2
			/* do nothing, HSI/2 is already selected as PLL input clock */
		#endif
		
		RCC->CFGR |= ((PLL_FACTOR-2)<<18);   //select PLL multiplication factor
 8008342:	4b11      	ldr	r3, [pc, #68]	; (8008388 <RCC_InitClock+0xa8>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	4a10      	ldr	r2, [pc, #64]	; (8008388 <RCC_InitClock+0xa8>)
 8008348:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800834c:	6053      	str	r3, [r2, #4]
		SET_BIT(RCC->CR, 24);                //enable PLL
 800834e:	4b0e      	ldr	r3, [pc, #56]	; (8008388 <RCC_InitClock+0xa8>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a0d      	ldr	r2, [pc, #52]	; (8008388 <RCC_InitClock+0xa8>)
 8008354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008358:	6013      	str	r3, [r2, #0]
		while(GET_BIT(RCC->CR, 25) == 0);    //wait until PLL is ready
 800835a:	bf00      	nop
 800835c:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <RCC_InitClock+0xa8>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	0e5b      	lsrs	r3, r3, #25
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f8      	beq.n	800835c <RCC_InitClock+0x7c>
		
		#if  CLK_TYPE == PLL
			SET_BIT(RCC->CFGR, 1);   //select PLL as system clock
 800836a:	4b07      	ldr	r3, [pc, #28]	; (8008388 <RCC_InitClock+0xa8>)
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	4a06      	ldr	r2, [pc, #24]	; (8008388 <RCC_InitClock+0xa8>)
 8008370:	f043 0302 	orr.w	r3, r3, #2
 8008374:	6053      	str	r3, [r2, #4]
			while( (RCC->CFGR & 0xC) != 0x8);   //wait until PLL is used as system clock
 8008376:	bf00      	nop
 8008378:	4b03      	ldr	r3, [pc, #12]	; (8008388 <RCC_InitClock+0xa8>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f003 030c 	and.w	r3, r3, #12
 8008380:	2b08      	cmp	r3, #8
 8008382:	d1f9      	bne.n	8008378 <RCC_InitClock+0x98>
	
	#if  HSI_STATE == DISABLED
		CLR_BIT(RCC->CR, 0);
	#endif
	
}
 8008384:	bf00      	nop
 8008386:	bd80      	pop	{r7, pc}
 8008388:	40021000 	.word	0x40021000

0800838c <RCC_EnablePeripheralClock>:


void  RCC_EnablePeripheralClock (uint8_t peripheral)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	4603      	mov	r3, r0
 8008394:	71fb      	strb	r3, [r7, #7]
	if(peripheral < 32)    //if peripheral is connected to AHB
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	2b1f      	cmp	r3, #31
 800839a:	d809      	bhi.n	80083b0 <RCC_EnablePeripheralClock+0x24>
	{
		SET_BIT(RCC->AHBENR, peripheral);
 800839c:	4b14      	ldr	r3, [pc, #80]	; (80083f0 <RCC_EnablePeripheralClock+0x64>)
 800839e:	695a      	ldr	r2, [r3, #20]
 80083a0:	79fb      	ldrb	r3, [r7, #7]
 80083a2:	2101      	movs	r1, #1
 80083a4:	fa01 f303 	lsl.w	r3, r1, r3
 80083a8:	4911      	ldr	r1, [pc, #68]	; (80083f0 <RCC_EnablePeripheralClock+0x64>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	614b      	str	r3, [r1, #20]
	}
	else if(peripheral < 96)    //if peripheral is connected to APB2
	{
		SET_BIT(RCC->APB2ENR, peripheral-64);
	}
}
 80083ae:	e01a      	b.n	80083e6 <RCC_EnablePeripheralClock+0x5a>
	else if(peripheral < 64)    //if peripheral is connected to APB1
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	2b3f      	cmp	r3, #63	; 0x3f
 80083b4:	d80a      	bhi.n	80083cc <RCC_EnablePeripheralClock+0x40>
		SET_BIT(RCC->APB1ENR, peripheral-32);
 80083b6:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <RCC_EnablePeripheralClock+0x64>)
 80083b8:	69da      	ldr	r2, [r3, #28]
 80083ba:	79fb      	ldrb	r3, [r7, #7]
 80083bc:	3b20      	subs	r3, #32
 80083be:	2101      	movs	r1, #1
 80083c0:	fa01 f303 	lsl.w	r3, r1, r3
 80083c4:	490a      	ldr	r1, [pc, #40]	; (80083f0 <RCC_EnablePeripheralClock+0x64>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	61cb      	str	r3, [r1, #28]
}
 80083ca:	e00c      	b.n	80083e6 <RCC_EnablePeripheralClock+0x5a>
	else if(peripheral < 96)    //if peripheral is connected to APB2
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	2b5f      	cmp	r3, #95	; 0x5f
 80083d0:	d809      	bhi.n	80083e6 <RCC_EnablePeripheralClock+0x5a>
		SET_BIT(RCC->APB2ENR, peripheral-64);
 80083d2:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <RCC_EnablePeripheralClock+0x64>)
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	3b40      	subs	r3, #64	; 0x40
 80083da:	2101      	movs	r1, #1
 80083dc:	fa01 f303 	lsl.w	r3, r1, r3
 80083e0:	4903      	ldr	r1, [pc, #12]	; (80083f0 <RCC_EnablePeripheralClock+0x64>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	618b      	str	r3, [r1, #24]
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bc80      	pop	{r7}
 80083ee:	4770      	bx	lr
 80083f0:	40021000 	.word	0x40021000

080083f4 <main>:
void ledToggle(u32 delayTime);
void jumpToBoot(void);


int main(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
	RCC_InitClock();
 80083f8:	f7ff ff72 	bl	80082e0 <RCC_InitClock>
	updatesInit();
 80083fc:	f000 f8e2 	bl	80085c4 <updatesInit>
	updatesSetState(READY_FOR_UPDATES, jumpToBoot);
 8008400:	4906      	ldr	r1, [pc, #24]	; (800841c <main+0x28>)
 8008402:	2001      	movs	r0, #1
 8008404:	f000 f900 	bl	8008608 <updatesSetState>
	NVIC_UnMaskIRQs();
 8008408:	f7ff ff5c 	bl	80082c4 <NVIC_UnMaskIRQs>

	/* main app */
	ledInit();
 800840c:	f000 f820 	bl	8008450 <ledInit>

	while (1)
	{
		ledToggle(5000);
 8008410:	f241 3088 	movw	r0, #5000	; 0x1388
 8008414:	f000 f832 	bl	800847c <ledToggle>
 8008418:	e7fa      	b.n	8008410 <main+0x1c>
 800841a:	bf00      	nop
 800841c:	080084bd 	.word	0x080084bd

08008420 <delay>:




void delay(u32 time_ms)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	for(volatile u32 i = 0; i < 1130UL * (time_ms<<2); i++);
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e002      	b.n	8008434 <delay+0x14>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f241 12a8 	movw	r2, #4520	; 0x11a8
 800843a:	fb02 f203 	mul.w	r2, r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	429a      	cmp	r2, r3
 8008442:	d8f4      	bhi.n	800842e <delay+0xe>
}
 8008444:	bf00      	nop
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr
	...

08008450 <ledInit>:


void ledInit(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
	GPIO_Pin_t  ledPin = {
 8008456:	4b08      	ldr	r3, [pc, #32]	; (8008478 <ledInit+0x28>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	607b      	str	r3, [r7, #4]
		.port       =  GPIO_PORTC,
		.pinNumber  =  GPIO_PIN13
	};

	GPIO_PinConfg_t  ledPinConfig = {
 800845c:	2305      	movs	r3, #5
 800845e:	703b      	strb	r3, [r7, #0]
 8008460:	2300      	movs	r3, #0
 8008462:	707b      	strb	r3, [r7, #1]
		.pinMode      =  GENERAL_PURPOSE_OUTPUT_PUSH_PULL,
		.outputSpeed  =  OUTPUT_SPEED_10MHz
	};

	GPIO_InitPins(&ledPin, &ledPinConfig);
 8008464:	463a      	mov	r2, r7
 8008466:	1d3b      	adds	r3, r7, #4
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7ff fe68 	bl	8008140 <GPIO_InitPins>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	08008724 	.word	0x08008724

0800847c <ledToggle>:


void ledToggle(u32 delayTime)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
	GPIO_Pin_t  ledPin = {
 8008484:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <ledToggle+0x3c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]
		.port       =  GPIO_PORTC,
		.pinNumber  =  GPIO_PIN13
	};

	GPIO_SetPinsOutputVoltage(&ledPin, GPIO_HIGH);
 800848a:	f107 030c 	add.w	r3, r7, #12
 800848e:	2101      	movs	r1, #1
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fe91 	bl	80081b8 <GPIO_SetPinsOutputVoltage>
	delay(delayTime);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff ffc2 	bl	8008420 <delay>
	GPIO_SetPinsOutputVoltage(&ledPin, GPIO_LOW);
 800849c:	f107 030c 	add.w	r3, r7, #12
 80084a0:	2100      	movs	r1, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fe88 	bl	80081b8 <GPIO_SetPinsOutputVoltage>
	delay(delayTime);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff ffb9 	bl	8008420 <delay>
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	08008724 	.word	0x08008724

080084bc <jumpToBoot>:



void jumpToBoot(void)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
	ECU_ConfigActivateBoot();
 80084c0:	f7ff fb4c 	bl	8007b5c <ECU_ConfigActivateBoot>
	NVIC_MaskIRQs(0);
 80084c4:	2000      	movs	r0, #0
 80084c6:	f7ff fee9 	bl	800829c <NVIC_MaskIRQs>
	NVIC_ResetSystem();
 80084ca:	f7ff fed9 	bl	8008280 <NVIC_ResetSystem>
}
 80084ce:	bf00      	nop
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084d2:	b480      	push	{r7}
 80084d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80084d6:	e7fe      	b.n	80084d6 <NMI_Handler+0x4>

080084d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084dc:	e7fe      	b.n	80084dc <HardFault_Handler+0x4>

080084de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084de:	b480      	push	{r7}
 80084e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084e2:	e7fe      	b.n	80084e2 <MemManage_Handler+0x4>

080084e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084e8:	e7fe      	b.n	80084e8 <BusFault_Handler+0x4>

080084ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084ea:	b480      	push	{r7}
 80084ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084ee:	e7fe      	b.n	80084ee <UsageFault_Handler+0x4>

080084f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084f0:	b480      	push	{r7}
 80084f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084f4:	bf00      	nop
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bc80      	pop	{r7}
 80084fa:	4770      	bx	lr

080084fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008500:	bf00      	nop
 8008502:	46bd      	mov	sp, r7
 8008504:	bc80      	pop	{r7}
 8008506:	4770      	bx	lr

08008508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800850c:	bf00      	nop
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr

08008514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008518:	f000 f8b2 	bl	8008680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800851c:	bf00      	nop
 800851e:	bd80      	pop	{r7, pc}

08008520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008524:	bf00      	nop
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <CAN_CallBackFun>:
/* private constants */
static const u8  ECU_NAK   =  'N';


static void CAN_CallBackFun(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b088      	sub	sp, #32
 8008530:	af00      	add	r7, sp, #0
	CAN_Frame_t  rxFrame;
	CAN_Rx(&rxFrame, 0);
 8008532:	f107 0310 	add.w	r3, r7, #16
 8008536:	2100      	movs	r1, #0
 8008538:	4618      	mov	r0, r3
 800853a:	f7ff fa51 	bl	80079e0 <CAN_Rx>


	CAN_Frame_t  txFrame = {
 800853e:	463b      	mov	r3, r7
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
 8008544:	605a      	str	r2, [r3, #4]
 8008546:	609a      	str	r2, [r3, #8]
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	2351      	movs	r3, #81	; 0x51
 800854c:	603b      	str	r3, [r7, #0]
 800854e:	2301      	movs	r3, #1
 8008550:	71bb      	strb	r3, [r7, #6]
 8008552:	234e      	movs	r3, #78	; 0x4e
 8008554:	71fb      	strb	r3, [r7, #7]
		.frameType    =   DATA_FRAME,
		.DLC          =   1,
		.data         =   {ECU_NAK}
	};

	if(updatesState != READY_FOR_UPDATES)
 8008556:	4b19      	ldr	r3, [pc, #100]	; (80085bc <CAN_CallBackFun+0x90>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d004      	beq.n	8008568 <CAN_CallBackFun+0x3c>
	{
		CAN_Tx(&txFrame);
 800855e:	463b      	mov	r3, r7
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff f945 	bl	80077f0 <CAN_Tx>
		return;
 8008566:	e026      	b.n	80085b6 <CAN_CallBackFun+0x8a>
	}

	if(rxFrame.id != ECU_UPDATE_CONTROL_ID)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b51      	cmp	r3, #81	; 0x51
 800856c:	d004      	beq.n	8008578 <CAN_CallBackFun+0x4c>
	{
		CAN_Tx(&txFrame);
 800856e:	463b      	mov	r3, r7
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff f93d 	bl	80077f0 <CAN_Tx>
		return;
 8008576:	e01e      	b.n	80085b6 <CAN_CallBackFun+0x8a>
	}

	if(rxFrame.DLC != 1)
 8008578:	7dbb      	ldrb	r3, [r7, #22]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d004      	beq.n	8008588 <CAN_CallBackFun+0x5c>
	{
		CAN_Tx(&txFrame);
 800857e:	463b      	mov	r3, r7
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff f935 	bl	80077f0 <CAN_Tx>
		return;
 8008586:	e016      	b.n	80085b6 <CAN_CallBackFun+0x8a>
	}

	if(rxFrame.data[0] != APP && rxFrame.data[0] != BOOTLOADER)
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b41      	cmp	r3, #65	; 0x41
 800858c:	d007      	beq.n	800859e <CAN_CallBackFun+0x72>
 800858e:	7dfb      	ldrb	r3, [r7, #23]
 8008590:	2b42      	cmp	r3, #66	; 0x42
 8008592:	d004      	beq.n	800859e <CAN_CallBackFun+0x72>
	{
		CAN_Tx(&txFrame);
 8008594:	463b      	mov	r3, r7
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff f92a 	bl	80077f0 <CAN_Tx>
		return;
 800859c:	e00b      	b.n	80085b6 <CAN_CallBackFun+0x8a>
	}

	if(updatesAvailableCallBack == NULL)
 800859e:	4b08      	ldr	r3, [pc, #32]	; (80085c0 <CAN_CallBackFun+0x94>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <CAN_CallBackFun+0x84>
	{
		CAN_Tx(&txFrame);
 80085a6:	463b      	mov	r3, r7
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff f921 	bl	80077f0 <CAN_Tx>
		return;
 80085ae:	e002      	b.n	80085b6 <CAN_CallBackFun+0x8a>
	}

	updatesAvailableCallBack();
 80085b0:	4b03      	ldr	r3, [pc, #12]	; (80085c0 <CAN_CallBackFun+0x94>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4798      	blx	r3
}
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	20000030 	.word	0x20000030
 80085c0:	20000034 	.word	0x20000034

080085c4 <updatesInit>:



void  updatesInit(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08e      	sub	sp, #56	; 0x38
 80085c8:	af00      	add	r7, sp, #0
	RCC_EnablePeripheralClock(CAN_PERIPHERAL);
 80085ca:	2039      	movs	r0, #57	; 0x39
 80085cc:	f7ff fede 	bl	800838c <RCC_EnablePeripheralClock>
	CAN_Init(CAN_CallBackFun);
 80085d0:	480c      	ldr	r0, [pc, #48]	; (8008604 <updatesInit+0x40>)
 80085d2:	f7fe fdc9 	bl	8007168 <CAN_Init>

	/* config filters */
	CAN_RxFilterBankConfig_t filterConfig = {
 80085d6:	1d3b      	adds	r3, r7, #4
 80085d8:	2234      	movs	r2, #52	; 0x34
 80085da:	2100      	movs	r1, #0
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f885 	bl	80086ec <memset>
 80085e2:	2351      	movs	r3, #81	; 0x51
 80085e4:	60bb      	str	r3, [r7, #8]
 80085e6:	2351      	movs	r3, #81	; 0x51
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	2351      	movs	r3, #81	; 0x51
 80085ec:	623b      	str	r3, [r7, #32]
 80085ee:	2351      	movs	r3, #81	; 0x51
 80085f0:	62fb      	str	r3, [r7, #44]	; 0x2c
				.frameType        =  DATA_FRAME
			}
		}
	};

	CAN_InitFilterBank(&filterConfig);
 80085f2:	1d3b      	adds	r3, r7, #4
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7fe fe89 	bl	800730c <CAN_InitFilterBank>
}
 80085fa:	bf00      	nop
 80085fc:	3738      	adds	r7, #56	; 0x38
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	0800852d 	.word	0x0800852d

08008608 <updatesSetState>:


void  updatesSetState(ECU_UpdatesState_t  state, void (*updatesAvailableCallBackFun)(void))
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
	updatesState = state;
 8008614:	4a05      	ldr	r2, [pc, #20]	; (800862c <updatesSetState+0x24>)
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	7013      	strb	r3, [r2, #0]
	updatesAvailableCallBack = updatesAvailableCallBackFun;
 800861a:	4a05      	ldr	r2, [pc, #20]	; (8008630 <updatesSetState+0x28>)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	6013      	str	r3, [r2, #0]
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	20000030 	.word	0x20000030
 8008630:	20000034 	.word	0x20000034

08008634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008634:	480c      	ldr	r0, [pc, #48]	; (8008668 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008636:	490d      	ldr	r1, [pc, #52]	; (800866c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008638:	4a0d      	ldr	r2, [pc, #52]	; (8008670 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800863a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800863c:	e002      	b.n	8008644 <LoopCopyDataInit>

0800863e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800863e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008642:	3304      	adds	r3, #4

08008644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008648:	d3f9      	bcc.n	800863e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800864a:	4a0a      	ldr	r2, [pc, #40]	; (8008674 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800864c:	4c0a      	ldr	r4, [pc, #40]	; (8008678 <LoopFillZerobss+0x22>)
  movs r3, #0
 800864e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008650:	e001      	b.n	8008656 <LoopFillZerobss>

08008652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008654:	3204      	adds	r2, #4

08008656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008658:	d3fb      	bcc.n	8008652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800865a:	f7ff ff61 	bl	8008520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800865e:	f000 f821 	bl	80086a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008662:	f7ff fec7 	bl	80083f4 <main>
  bx lr
 8008666:	4770      	bx	lr
  ldr r0, =_sdata
 8008668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800866c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8008670:	08008730 	.word	0x08008730
  ldr r2, =_sbss
 8008674:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8008678:	2000003c 	.word	0x2000003c

0800867c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800867c:	e7fe      	b.n	800867c <ADC1_2_IRQHandler>
	...

08008680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008684:	4b05      	ldr	r3, [pc, #20]	; (800869c <HAL_IncTick+0x1c>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	4b05      	ldr	r3, [pc, #20]	; (80086a0 <HAL_IncTick+0x20>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4413      	add	r3, r2
 8008690:	4a03      	ldr	r2, [pc, #12]	; (80086a0 <HAL_IncTick+0x20>)
 8008692:	6013      	str	r3, [r2, #0]
}
 8008694:	bf00      	nop
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr
 800869c:	2000000c 	.word	0x2000000c
 80086a0:	20000038 	.word	0x20000038

080086a4 <__libc_init_array>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	2500      	movs	r5, #0
 80086a8:	4e0c      	ldr	r6, [pc, #48]	; (80086dc <__libc_init_array+0x38>)
 80086aa:	4c0d      	ldr	r4, [pc, #52]	; (80086e0 <__libc_init_array+0x3c>)
 80086ac:	1ba4      	subs	r4, r4, r6
 80086ae:	10a4      	asrs	r4, r4, #2
 80086b0:	42a5      	cmp	r5, r4
 80086b2:	d109      	bne.n	80086c8 <__libc_init_array+0x24>
 80086b4:	f000 f822 	bl	80086fc <_init>
 80086b8:	2500      	movs	r5, #0
 80086ba:	4e0a      	ldr	r6, [pc, #40]	; (80086e4 <__libc_init_array+0x40>)
 80086bc:	4c0a      	ldr	r4, [pc, #40]	; (80086e8 <__libc_init_array+0x44>)
 80086be:	1ba4      	subs	r4, r4, r6
 80086c0:	10a4      	asrs	r4, r4, #2
 80086c2:	42a5      	cmp	r5, r4
 80086c4:	d105      	bne.n	80086d2 <__libc_init_array+0x2e>
 80086c6:	bd70      	pop	{r4, r5, r6, pc}
 80086c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086cc:	4798      	blx	r3
 80086ce:	3501      	adds	r5, #1
 80086d0:	e7ee      	b.n	80086b0 <__libc_init_array+0xc>
 80086d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086d6:	4798      	blx	r3
 80086d8:	3501      	adds	r5, #1
 80086da:	e7f2      	b.n	80086c2 <__libc_init_array+0x1e>
 80086dc:	08008728 	.word	0x08008728
 80086e0:	08008728 	.word	0x08008728
 80086e4:	08008728 	.word	0x08008728
 80086e8:	0800872c 	.word	0x0800872c

080086ec <memset>:
 80086ec:	4603      	mov	r3, r0
 80086ee:	4402      	add	r2, r0
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d100      	bne.n	80086f6 <memset+0xa>
 80086f4:	4770      	bx	lr
 80086f6:	f803 1b01 	strb.w	r1, [r3], #1
 80086fa:	e7f9      	b.n	80086f0 <memset+0x4>

080086fc <_init>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr

08008708 <_fini>:
 8008708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870a:	bf00      	nop
 800870c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870e:	bc08      	pop	{r3}
 8008710:	469e      	mov	lr, r3
 8008712:	4770      	bx	lr
